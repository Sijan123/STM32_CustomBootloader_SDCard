
Bootloader_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001674  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08001844  08001844  00011844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001968  08001968  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001968  08001968  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001968  08001968  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001968  08001968  00011968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800196c  0800196c  0001196c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000068  080019d8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  080019d8  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d69  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001531  00000000  00000000  00027e01  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003a8  00000000  00000000  00029338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002f0  00000000  00000000  000296e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021c9d  00000000  00000000  000299d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006440  00000000  00000000  0004b66d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5b20  00000000  00000000  00051aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001175cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ea0  00000000  00000000  00117648  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800182c 	.word	0x0800182c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	0800182c 	.word	0x0800182c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <gpioinit>:

/*
 * Initialise GPIO CLocks
 * Input Mode for User-Button
 */
void gpioinit(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af02      	add	r7, sp, #8

    RCC_AHB1_CLKEN(RCC_AHB1Peri_GPIOA);
 80002b6:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <gpioinit+0x40>)
 80002b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ba:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <gpioinit+0x40>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	6313      	str	r3, [r2, #48]	; 0x30
    RCC_AHB1_CLKEN(RCC_AHB1Peri_GPIOB);
 80002c2:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <gpioinit+0x40>)
 80002c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <gpioinit+0x40>)
 80002c8:	f043 0302 	orr.w	r3, r3, #2
 80002cc:	6313      	str	r3, [r2, #48]	; 0x30
    RCC_AHB1_CLKEN(RCC_AHB1Peri_GPIOC);
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <gpioinit+0x40>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a07      	ldr	r2, [pc, #28]	; (80002f0 <gpioinit+0x40>)
 80002d4:	f043 0304 	orr.w	r3, r3, #4
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30

    GPIO_Config(GPIOC, 13, Input_Mode, No, No_AF);
 80002da:	2300      	movs	r3, #0
 80002dc:	9300      	str	r3, [sp, #0]
 80002de:	2300      	movs	r3, #0
 80002e0:	2200      	movs	r2, #0
 80002e2:	210d      	movs	r1, #13
 80002e4:	4803      	ldr	r0, [pc, #12]	; (80002f4 <gpioinit+0x44>)
 80002e6:	f000 fb25 	bl	8000934 <GPIO_Config>
}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40023800 	.word	0x40023800
 80002f4:	40020800 	.word	0x40020800

080002f8 <uartinit>:
/*
 * Initialise UART1-Interface
 * TX_PIN : PA2
 * RX_PIN : PA3
 */
void uartinit(void) {
 80002f8:	b590      	push	{r4, r7, lr}
 80002fa:	b08b      	sub	sp, #44	; 0x2c
 80002fc:	af04      	add	r7, sp, #16

    RCC_APB1_CLKEN(RCC_APB1Peri_USART2);
 80002fe:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <uartinit+0x70>)
 8000300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000302:	4a19      	ldr	r2, [pc, #100]	; (8000368 <uartinit+0x70>)
 8000304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000308:	6413      	str	r3, [r2, #64]	; 0x40
    GPIO_Config(GPIOA, 3, Alternate_Mode, No, AF_SPI_USART);
 800030a:	2307      	movs	r3, #7
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	2300      	movs	r3, #0
 8000310:	2202      	movs	r2, #2
 8000312:	2103      	movs	r1, #3
 8000314:	4815      	ldr	r0, [pc, #84]	; (800036c <uartinit+0x74>)
 8000316:	f000 fb0d 	bl	8000934 <GPIO_Config>
    GPIO_Config(GPIOA, 2, Alternate_Mode, No, AF_SPI_USART);
 800031a:	2307      	movs	r3, #7
 800031c:	9300      	str	r3, [sp, #0]
 800031e:	2300      	movs	r3, #0
 8000320:	2202      	movs	r2, #2
 8000322:	2102      	movs	r1, #2
 8000324:	4811      	ldr	r0, [pc, #68]	; (800036c <uartinit+0x74>)
 8000326:	f000 fb05 	bl	8000934 <GPIO_Config>

    USART_ConfigTypedef huart;

    huart.Mode = USART_TX_RX_ENABLE;
 800032a:	230c      	movs	r3, #12
 800032c:	603b      	str	r3, [r7, #0]
    huart.Oversampling_Mode = Oversampling_16;
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
    huart.Parity_Control = Parity_Disable;
 8000332:	2300      	movs	r3, #0
 8000334:	607b      	str	r3, [r7, #4]
    huart.Parity_Selection = Parity_Odd;
 8000336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800033a:	60bb      	str	r3, [r7, #8]
    huart.Baudrate = 0x683;  //1200 0x3415 //0x683--9600
 800033c:	f240 6383 	movw	r3, #1667	; 0x683
 8000340:	613b      	str	r3, [r7, #16]

    USART_Config(USART2, huart);
 8000342:	466c      	mov	r4, sp
 8000344:	f107 030c 	add.w	r3, r7, #12
 8000348:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800034c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000350:	463b      	mov	r3, r7
 8000352:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000354:	4806      	ldr	r0, [pc, #24]	; (8000370 <uartinit+0x78>)
 8000356:	f000 fd99 	bl	8000e8c <USART_Config>
    USART_Enable(USART2);
 800035a:	4805      	ldr	r0, [pc, #20]	; (8000370 <uartinit+0x78>)
 800035c:	f000 fdb5 	bl	8000eca <USART_Enable>
}
 8000360:	bf00      	nop
 8000362:	371c      	adds	r7, #28
 8000364:	46bd      	mov	sp, r7
 8000366:	bd90      	pop	{r4, r7, pc}
 8000368:	40023800 	.word	0x40023800
 800036c:	40020000 	.word	0x40020000
 8000370:	40004400 	.word	0x40004400

08000374 <spiinit>:
 * SCK_PIN : PA5 (SPI clock)
 * MOSI_PIN : PA7 (SPI dataout)
 * MISO_PIN : PA6 (SPI datain)
 * CS_PIN : PB5
 */
void spiinit(void) {
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af04      	add	r7, sp, #16

    RCC_APB2_CLKEN(RCC_APB2Peri_SPI1);
 800037a:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <spiinit+0x78>)
 800037c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800037e:	4a1b      	ldr	r2, [pc, #108]	; (80003ec <spiinit+0x78>)
 8000380:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000384:	6453      	str	r3, [r2, #68]	; 0x44

    GPIO_Config(GPIOA, SCK_PIN, Alternate_Mode, No, AF_SPI);
 8000386:	2305      	movs	r3, #5
 8000388:	9300      	str	r3, [sp, #0]
 800038a:	2300      	movs	r3, #0
 800038c:	2202      	movs	r2, #2
 800038e:	2105      	movs	r1, #5
 8000390:	4817      	ldr	r0, [pc, #92]	; (80003f0 <spiinit+0x7c>)
 8000392:	f000 facf 	bl	8000934 <GPIO_Config>
    GPIO_Config(GPIOA, MOSI_PIN, Alternate_Mode, No, AF_SPI);
 8000396:	2305      	movs	r3, #5
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	2300      	movs	r3, #0
 800039c:	2202      	movs	r2, #2
 800039e:	2107      	movs	r1, #7
 80003a0:	4813      	ldr	r0, [pc, #76]	; (80003f0 <spiinit+0x7c>)
 80003a2:	f000 fac7 	bl	8000934 <GPIO_Config>
    GPIO_Config(GPIOA, MISO_PIN, Alternate_Mode, No, AF_SPI);
 80003a6:	2305      	movs	r3, #5
 80003a8:	9300      	str	r3, [sp, #0]
 80003aa:	2300      	movs	r3, #0
 80003ac:	2202      	movs	r2, #2
 80003ae:	2106      	movs	r1, #6
 80003b0:	480f      	ldr	r0, [pc, #60]	; (80003f0 <spiinit+0x7c>)
 80003b2:	f000 fabf 	bl	8000934 <GPIO_Config>
    GPIO_Config(GPIOB, CS_PIN, Output_Mode, Pull_Down, No_AF);
 80003b6:	2300      	movs	r3, #0
 80003b8:	9300      	str	r3, [sp, #0]
 80003ba:	2302      	movs	r3, #2
 80003bc:	2201      	movs	r2, #1
 80003be:	2105      	movs	r1, #5
 80003c0:	480c      	ldr	r0, [pc, #48]	; (80003f4 <spiinit+0x80>)
 80003c2:	f000 fab7 	bl	8000934 <GPIO_Config>

    SPI_Config(SPI1, SPI_BaudRate_sysclkby16, SPI_BIDIMode_2Line, SPI_First_MSB,
 80003c6:	2300      	movs	r3, #0
 80003c8:	9302      	str	r3, [sp, #8]
 80003ca:	2301      	movs	r3, #1
 80003cc:	9301      	str	r3, [sp, #4]
 80003ce:	2300      	movs	r3, #0
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	2300      	movs	r3, #0
 80003d4:	2200      	movs	r2, #0
 80003d6:	2103      	movs	r1, #3
 80003d8:	4807      	ldr	r0, [pc, #28]	; (80003f8 <spiinit+0x84>)
 80003da:	f000 fc79 	bl	8000cd0 <SPI_Config>
            SPI_DataFrame_8Bit, SPI_Master, SPI_Receive);
    SPI_Enable(SPI1);
 80003de:	4806      	ldr	r0, [pc, #24]	; (80003f8 <spiinit+0x84>)
 80003e0:	f000 fca1 	bl	8000d26 <SPI_Enable>

}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40023800 	.word	0x40023800
 80003f0:	40020000 	.word	0x40020000
 80003f4:	40020400 	.word	0x40020400
 80003f8:	40013000 	.word	0x40013000

080003fc <spideinit>:

/*
 * SPI Disable before jumping to user app
 */
void spideinit(void) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
    GPIO_Deinit(GPIOA, 5);
 8000400:	2105      	movs	r1, #5
 8000402:	4809      	ldr	r0, [pc, #36]	; (8000428 <spideinit+0x2c>)
 8000404:	f000 fad8 	bl	80009b8 <GPIO_Deinit>
    GPIO_Deinit(GPIOA, 6);
 8000408:	2106      	movs	r1, #6
 800040a:	4807      	ldr	r0, [pc, #28]	; (8000428 <spideinit+0x2c>)
 800040c:	f000 fad4 	bl	80009b8 <GPIO_Deinit>
    GPIO_Deinit(GPIOA, 7);
 8000410:	2107      	movs	r1, #7
 8000412:	4805      	ldr	r0, [pc, #20]	; (8000428 <spideinit+0x2c>)
 8000414:	f000 fad0 	bl	80009b8 <GPIO_Deinit>
    RCC_APB2_CLKDIS(RCC_APB2Peri_SPI1);
 8000418:	4b04      	ldr	r3, [pc, #16]	; (800042c <spideinit+0x30>)
 800041a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800041c:	4a03      	ldr	r2, [pc, #12]	; (800042c <spideinit+0x30>)
 800041e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000422:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40020000 	.word	0x40020000
 800042c:	40023800 	.word	0x40023800

08000430 <main>:

/*
 * main function for Bootloader
 */
int main(void) {
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0

    gpioinit();
 8000434:	f7ff ff3c 	bl	80002b0 <gpioinit>
    uartinit();
 8000438:	f7ff ff5e 	bl	80002f8 <uartinit>

    //If button is pressed, jump to user application
    if (GPIO_Read(GPIOC, 13)) {
 800043c:	210d      	movs	r1, #13
 800043e:	480a      	ldr	r0, [pc, #40]	; (8000468 <main+0x38>)
 8000440:	f000 faf7 	bl	8000a32 <GPIO_Read>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d004      	beq.n	8000454 <main+0x24>
        spideinit();
 800044a:	f7ff ffd7 	bl	80003fc <spideinit>
        jumpto_app();
 800044e:	f000 f8e3 	bl	8000618 <jumpto_app>
 8000452:	e003      	b.n	800045c <main+0x2c>

    //else load the commands for bootloader
    } else {
        spiinit();
 8000454:	f7ff ff8e 	bl	8000374 <spiinit>
        bootloader_uartread();
 8000458:	f000 f8f8 	bl	800064c <bootloader_uartread>
    }

    while (1) {

        delay1();
 800045c:	f000 f806 	bl	800046c <delay1>
        delay1();
 8000460:	f000 f804 	bl	800046c <delay1>
        delay1();
 8000464:	e7fa      	b.n	800045c <main+0x2c>
 8000466:	bf00      	nop
 8000468:	40020800 	.word	0x40020800

0800046c <delay1>:
    }

    return 0;
}

void delay1(void) {
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
    unsigned static volatile long i = 0;
    unsigned static volatile long j = 0;
    for (i = 0; i < 2000; i++) {
 8000470:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <delay1+0x48>)
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	e012      	b.n	800049e <delay1+0x32>
        for (j = 0; j < 400;) {
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <delay1+0x4c>)
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	e004      	b.n	800048a <delay1+0x1e>
            j++;
 8000480:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <delay1+0x4c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	3301      	adds	r3, #1
 8000486:	4a0c      	ldr	r2, [pc, #48]	; (80004b8 <delay1+0x4c>)
 8000488:	6013      	str	r3, [r2, #0]
        for (j = 0; j < 400;) {
 800048a:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <delay1+0x4c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000492:	d3f5      	bcc.n	8000480 <delay1+0x14>
    for (i = 0; i < 2000; i++) {
 8000494:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <delay1+0x48>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	3301      	adds	r3, #1
 800049a:	4a06      	ldr	r2, [pc, #24]	; (80004b4 <delay1+0x48>)
 800049c:	6013      	str	r3, [r2, #0]
 800049e:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <delay1+0x48>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80004a6:	d3e7      	bcc.n	8000478 <delay1+0xc>
        }
    }
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	20000084 	.word	0x20000084
 80004b8:	20000088 	.word	0x20000088

080004bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ce:	e7fe      	b.n	80004ce <HardFault_Handler+0x4>

080004d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <MemManage_Handler+0x4>

080004d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004da:	e7fe      	b.n	80004da <BusFault_Handler+0x4>

080004dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <UsageFault_Handler+0x4>

080004e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000510:	f000 f86e 	bl	80005f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}

08000518 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <_sbrk+0x50>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d102      	bne.n	800052e <_sbrk+0x16>
		heap_end = &end;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <_sbrk+0x50>)
 800052a:	4a10      	ldr	r2, [pc, #64]	; (800056c <_sbrk+0x54>)
 800052c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <_sbrk+0x50>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <_sbrk+0x50>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4413      	add	r3, r2
 800053c:	466a      	mov	r2, sp
 800053e:	4293      	cmp	r3, r2
 8000540:	d907      	bls.n	8000552 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000542:	f000 fd43 	bl	8000fcc <__errno>
 8000546:	4602      	mov	r2, r0
 8000548:	230c      	movs	r3, #12
 800054a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800054c:	f04f 33ff 	mov.w	r3, #4294967295
 8000550:	e006      	b.n	8000560 <_sbrk+0x48>
	}

	heap_end += incr;
 8000552:	4b05      	ldr	r3, [pc, #20]	; (8000568 <_sbrk+0x50>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	4a03      	ldr	r2, [pc, #12]	; (8000568 <_sbrk+0x50>)
 800055c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800055e:	68fb      	ldr	r3, [r7, #12]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000008c 	.word	0x2000008c
 800056c:	200002e0 	.word	0x200002e0

08000570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <SystemInit+0x28>)
 8000576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800057a:	4a07      	ldr	r2, [pc, #28]	; (8000598 <SystemInit+0x28>)
 800057c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <SystemInit+0x28>)
 8000586:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800058a:	609a      	str	r2, [r3, #8]
#endif
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800059c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005a2:	e003      	b.n	80005ac <LoopCopyDataInit>

080005a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005aa:	3104      	adds	r1, #4

080005ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005ac:	480b      	ldr	r0, [pc, #44]	; (80005dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005b4:	d3f6      	bcc.n	80005a4 <CopyDataInit>
  ldr  r2, =_sbss
 80005b6:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005b8:	e002      	b.n	80005c0 <LoopFillZerobss>

080005ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005bc:	f842 3b04 	str.w	r3, [r2], #4

080005c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005c4:	d3f9      	bcc.n	80005ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005c6:	f7ff ffd3 	bl	8000570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ca:	f000 fd05 	bl	8000fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ce:	f7ff ff2f 	bl	8000430 <main>
  bx  lr    
 80005d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80005d8:	08001970 	.word	0x08001970
  ldr  r0, =_sdata
 80005dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005e0:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 80005e4:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 80005e8:	200002dc 	.word	0x200002dc

080005ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC_IRQHandler>
	...

080005f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_IncTick+0x20>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <HAL_IncTick+0x24>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4413      	add	r3, r2
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <HAL_IncTick+0x24>)
 8000602:	6013      	str	r3, [r2, #0]
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000000 	.word	0x20000000
 8000614:	200002a4 	.word	0x200002a4

08000618 <jumpto_app>:
 * Jump to user application
 * Retrive the MSP value and Reset Handler Address
 * Call the Reset Handler using Function Pointer
 *
 */
void jumpto_app() {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0

    void (*app_reset_handler)(void);

    uint32_t msp_value = *(volatile uint32_t*) FLASH_SECTOR2_ADDRESS;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <jumpto_app+0x2c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	f383 8808 	msr	MSP, r3
    __set_MSP(msp_value);
    uint32_t resethandler_address = *(volatile uint32_t*) (FLASH_SECTOR2_ADDRESS
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <jumpto_app+0x30>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	60bb      	str	r3, [r7, #8]
            + 4);
    app_reset_handler = (void*) resethandler_address;
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	607b      	str	r3, [r7, #4]
    app_reset_handler();
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4798      	blx	r3

}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	08008000 	.word	0x08008000
 8000648:	08008004 	.word	0x08008004

0800064c <bootloader_uartread>:
 * Bootloader Mode commands via UART
 * Erase main memory sector
 * Load binary image from SD-Card
 *
 */
void bootloader_uartread() {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0

    while (1) {
        uint8_t blcommand;

        printmsg(USART2, "*************************\n");
 8000652:	4912      	ldr	r1, [pc, #72]	; (800069c <bootloader_uartread+0x50>)
 8000654:	4812      	ldr	r0, [pc, #72]	; (80006a0 <bootloader_uartread+0x54>)
 8000656:	f000 fc9d 	bl	8000f94 <printmsg>
        printmsg(USART2, "Welcome to Bootloader\n");
 800065a:	4912      	ldr	r1, [pc, #72]	; (80006a4 <bootloader_uartread+0x58>)
 800065c:	4810      	ldr	r0, [pc, #64]	; (80006a0 <bootloader_uartread+0x54>)
 800065e:	f000 fc99 	bl	8000f94 <printmsg>
        printmsg(USART2, "Erase Sector = 0x00\n");
 8000662:	4911      	ldr	r1, [pc, #68]	; (80006a8 <bootloader_uartread+0x5c>)
 8000664:	480e      	ldr	r0, [pc, #56]	; (80006a0 <bootloader_uartread+0x54>)
 8000666:	f000 fc95 	bl	8000f94 <printmsg>
        printmsg(USART2, "Load Software = 0x01\n");
 800066a:	4910      	ldr	r1, [pc, #64]	; (80006ac <bootloader_uartread+0x60>)
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <bootloader_uartread+0x54>)
 800066e:	f000 fc91 	bl	8000f94 <printmsg>

        USART_Receive(USART2, bootloader_rx_buffer, 1);
 8000672:	2201      	movs	r2, #1
 8000674:	490e      	ldr	r1, [pc, #56]	; (80006b0 <bootloader_uartread+0x64>)
 8000676:	480a      	ldr	r0, [pc, #40]	; (80006a0 <bootloader_uartread+0x54>)
 8000678:	f000 fc64 	bl	8000f44 <USART_Receive>
        blcommand = *(bootloader_rx_buffer);
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <bootloader_uartread+0x64>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	71fb      	strb	r3, [r7, #7]

        switch (blcommand) {
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d002      	beq.n	800068e <bootloader_uartread+0x42>
 8000688:	2b01      	cmp	r3, #1
 800068a:	d003      	beq.n	8000694 <bootloader_uartread+0x48>
 800068c:	e005      	b.n	800069a <bootloader_uartread+0x4e>

        case 0x00:
            bootloader_flasherase_cmd();
 800068e:	f000 f811 	bl	80006b4 <bootloader_flasherase_cmd>
            break;
 8000692:	e002      	b.n	800069a <bootloader_uartread+0x4e>
        case 0x01:
            bootloader_memwrite_cmd();
 8000694:	f000 f838 	bl	8000708 <bootloader_memwrite_cmd>
            break;
 8000698:	bf00      	nop
    while (1) {
 800069a:	e7da      	b.n	8000652 <bootloader_uartread+0x6>
 800069c:	08001844 	.word	0x08001844
 80006a0:	40004400 	.word	0x40004400
 80006a4:	08001860 	.word	0x08001860
 80006a8:	08001878 	.word	0x08001878
 80006ac:	08001890 	.word	0x08001890
 80006b0:	20000090 	.word	0x20000090

080006b4 <bootloader_flasherase_cmd>:

/*
 *Erase main memory sector received UART
 *
 */
void bootloader_flasherase_cmd() {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0

    printmsg(USART2, "Enter Sector number (0-7)\n");
 80006ba:	490f      	ldr	r1, [pc, #60]	; (80006f8 <bootloader_flasherase_cmd+0x44>)
 80006bc:	480f      	ldr	r0, [pc, #60]	; (80006fc <bootloader_flasherase_cmd+0x48>)
 80006be:	f000 fc69 	bl	8000f94 <printmsg>
    USART_Receive(USART2, bootloader_rx_buffer, 1);
 80006c2:	2201      	movs	r2, #1
 80006c4:	490e      	ldr	r1, [pc, #56]	; (8000700 <bootloader_flasherase_cmd+0x4c>)
 80006c6:	480d      	ldr	r0, [pc, #52]	; (80006fc <bootloader_flasherase_cmd+0x48>)
 80006c8:	f000 fc3c 	bl	8000f44 <USART_Receive>
    uint8_t sector = *(bootloader_rx_buffer);
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <bootloader_flasherase_cmd+0x4c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	73fb      	strb	r3, [r7, #15]

    FLASH_initEraseTypedef ftype;
    ftype.voltageLevel = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
    ftype.sector = sector;
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	713b      	strb	r3, [r7, #4]

    Flash_Erase(&ftype);
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 f8bb 	bl	8000858 <Flash_Erase>

    printmsg(USART2, "Sector %d erased \n", sector);
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	461a      	mov	r2, r3
 80006e6:	4907      	ldr	r1, [pc, #28]	; (8000704 <bootloader_flasherase_cmd+0x50>)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <bootloader_flasherase_cmd+0x48>)
 80006ea:	f000 fc53 	bl	8000f94 <printmsg>

}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	080018a8 	.word	0x080018a8
 80006fc:	40004400 	.word	0x40004400
 8000700:	20000090 	.word	0x20000090
 8000704:	080018c4 	.word	0x080018c4

08000708 <bootloader_memwrite_cmd>:
/*
 * Read image from SD-Card and place to buffer sd_data[512]
 * 512 byte of data is copied in one block
 */

void bootloader_memwrite_cmd() {
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0

    printmsg(USART2, "Enter Memory Addess \n");
 800070e:	491a      	ldr	r1, [pc, #104]	; (8000778 <bootloader_memwrite_cmd+0x70>)
 8000710:	481a      	ldr	r0, [pc, #104]	; (800077c <bootloader_memwrite_cmd+0x74>)
 8000712:	f000 fc3f 	bl	8000f94 <printmsg>
    USART_Receive(USART2, bootloader_rx_buffer, 4);
 8000716:	2204      	movs	r2, #4
 8000718:	4919      	ldr	r1, [pc, #100]	; (8000780 <bootloader_memwrite_cmd+0x78>)
 800071a:	4818      	ldr	r0, [pc, #96]	; (800077c <bootloader_memwrite_cmd+0x74>)
 800071c:	f000 fc12 	bl	8000f44 <USART_Receive>
    uint32_t mem_address = *(uint32_t*) (bootloader_rx_buffer);
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <bootloader_memwrite_cmd+0x78>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	60bb      	str	r3, [r7, #8]

    sd_init();
 8000726:	f000 f99b 	bl	8000a60 <sd_init>
    uint32_t sd_address = 0x006028;
 800072a:	f246 0328 	movw	r3, #24616	; 0x6028
 800072e:	607b      	str	r3, [r7, #4]

    for (uint8_t l = 0; l < 3; l++) {
 8000730:	2300      	movs	r3, #0
 8000732:	73fb      	strb	r3, [r7, #15]
 8000734:	e014      	b.n	8000760 <bootloader_memwrite_cmd+0x58>
        sd_readsingleblock(sd_address + l, sd_data);
 8000736:	7bfa      	ldrb	r2, [r7, #15]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4413      	add	r3, r2
 800073c:	4911      	ldr	r1, [pc, #68]	; (8000784 <bootloader_memwrite_cmd+0x7c>)
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fa14 	bl	8000b6c <sd_readsingleblock>
        execute_memorywrite(sd_data, mem_address + (512 * l), 512);
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	025b      	lsls	r3, r3, #9
 8000748:	461a      	mov	r2, r3
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	4413      	add	r3, r2
 800074e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000752:	4619      	mov	r1, r3
 8000754:	480b      	ldr	r0, [pc, #44]	; (8000784 <bootloader_memwrite_cmd+0x7c>)
 8000756:	f000 f819 	bl	800078c <execute_memorywrite>
    for (uint8_t l = 0; l < 3; l++) {
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	3301      	adds	r3, #1
 800075e:	73fb      	strb	r3, [r7, #15]
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	2b02      	cmp	r3, #2
 8000764:	d9e7      	bls.n	8000736 <bootloader_memwrite_cmd+0x2e>
    }

    printmsg(USART2, "Program Loaded\n");
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <bootloader_memwrite_cmd+0x80>)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <bootloader_memwrite_cmd+0x74>)
 800076a:	f000 fc13 	bl	8000f94 <printmsg>

}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	080018d8 	.word	0x080018d8
 800077c:	40004400 	.word	0x40004400
 8000780:	20000090 	.word	0x20000090
 8000784:	2000009c 	.word	0x2000009c
 8000788:	080018f0 	.word	0x080018f0

0800078c <execute_memorywrite>:

/*
 * Place data from Buffer to Sector-2
 */
void execute_memorywrite(uint8_t *pbuffer, uint32_t mem_address,
        uint16_t payload_len) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	4613      	mov	r3, r2
 8000798:	80fb      	strh	r3, [r7, #6]

    for (uint32_t i = 0; i < payload_len; i++) {
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	e00d      	b.n	80007bc <execute_memorywrite+0x30>
        Flash_Write(Data_Byte, mem_address + (i), pbuffer[i]);
 80007a0:	68ba      	ldr	r2, [r7, #8]
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	18d1      	adds	r1, r2, r3
 80007a6:	68fa      	ldr	r2, [r7, #12]
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	2000      	movs	r0, #0
 80007b2:	f000 f80b 	bl	80007cc <Flash_Write>
    for (uint32_t i = 0; i < payload_len; i++) {
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	3301      	adds	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	697a      	ldr	r2, [r7, #20]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d3ed      	bcc.n	80007a0 <execute_memorywrite+0x14>
    }
}
 80007c4:	bf00      	nop
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <Flash_Write>:
#include <sp_stm32_flash.h>

/*
 * Write a byte to Flash/Main memory in given Address
 */
void Flash_Write(FLASH_TypeDataTypeDef Typedata, uint32_t Address, uint8_t Data) {
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	71fb      	strb	r3, [r7, #7]
 80007d8:	4613      	mov	r3, r2
 80007da:	71bb      	strb	r3, [r7, #6]

    Flash_Unlock();
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <Flash_Write+0x80>)
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <Flash_Write+0x84>)
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <Flash_Write+0x80>)
 80007e4:	4a1b      	ldr	r2, [pc, #108]	; (8000854 <Flash_Write+0x88>)
 80007e6:	605a      	str	r2, [r3, #4]
    WaitBusy_Flash();
 80007e8:	bf00      	nop
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <Flash_Write+0x80>)
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1f9      	bne.n	80007ea <Flash_Write+0x1e>
    FLASH->CR |= Typedata << (8);
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <Flash_Write+0x80>)
 80007f8:	691b      	ldr	r3, [r3, #16]
 80007fa:	79fa      	ldrb	r2, [r7, #7]
 80007fc:	0212      	lsls	r2, r2, #8
 80007fe:	4611      	mov	r1, r2
 8000800:	4a12      	ldr	r2, [pc, #72]	; (800084c <Flash_Write+0x80>)
 8000802:	430b      	orrs	r3, r1
 8000804:	6113      	str	r3, [r2, #16]
    Activate_Programming();
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <Flash_Write+0x80>)
 8000808:	691b      	ldr	r3, [r3, #16]
 800080a:	4a10      	ldr	r2, [pc, #64]	; (800084c <Flash_Write+0x80>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6113      	str	r3, [r2, #16]
    *(__IO uint8_t*) Address = (uint8_t) Data;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	79ba      	ldrb	r2, [r7, #6]
 8000816:	701a      	strb	r2, [r3, #0]
    WaitBusy_Flash();
 8000818:	bf00      	nop
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <Flash_Write+0x80>)
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d1f9      	bne.n	800081a <Flash_Write+0x4e>
    Deactivate_Programming();
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <Flash_Write+0x80>)
 8000828:	691b      	ldr	r3, [r3, #16]
 800082a:	4a08      	ldr	r2, [pc, #32]	; (800084c <Flash_Write+0x80>)
 800082c:	f023 0301 	bic.w	r3, r3, #1
 8000830:	6113      	str	r3, [r2, #16]
    Flash_LockKey();
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <Flash_Write+0x80>)
 8000834:	691b      	ldr	r3, [r3, #16]
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <Flash_Write+0x80>)
 8000838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800083c:	6113      	str	r3, [r2, #16]
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40023c00 	.word	0x40023c00
 8000850:	45670123 	.word	0x45670123
 8000854:	cdef89ab 	.word	0xcdef89ab

08000858 <Flash_Erase>:

/*
 * Erase a Sector in main memory
 */
void Flash_Erase(FLASH_initEraseTypedef *eraseinit) {
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]

    uint32_t tmp_psize = 0U;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]

    switch (eraseinit->voltageLevel) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	2b03      	cmp	r3, #3
 800086a:	d817      	bhi.n	800089c <Flash_Erase+0x44>
 800086c:	a201      	add	r2, pc, #4	; (adr r2, 8000874 <Flash_Erase+0x1c>)
 800086e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000872:	bf00      	nop
 8000874:	08000885 	.word	0x08000885
 8000878:	0800088b 	.word	0x0800088b
 800087c:	08000891 	.word	0x08000891
 8000880:	08000897 	.word	0x08000897
    case Level0:
        tmp_psize = Data_Byte;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
        break;
 8000888:	e008      	b.n	800089c <Flash_Erase+0x44>
    case Level1:
        tmp_psize = Data_HalfWord;
 800088a:	2301      	movs	r3, #1
 800088c:	60fb      	str	r3, [r7, #12]
        break;
 800088e:	e005      	b.n	800089c <Flash_Erase+0x44>
    case Level2:
        tmp_psize = Data_Word;
 8000890:	2302      	movs	r3, #2
 8000892:	60fb      	str	r3, [r7, #12]
        break;
 8000894:	e002      	b.n	800089c <Flash_Erase+0x44>
    case Level3:
        tmp_psize = Data_DoubleWord;
 8000896:	2303      	movs	r3, #3
 8000898:	60fb      	str	r3, [r7, #12]
        break;
 800089a:	bf00      	nop

    }

    Flash_Unlock();
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <Flash_Erase+0xd0>)
 800089e:	4a23      	ldr	r2, [pc, #140]	; (800092c <Flash_Erase+0xd4>)
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	4b21      	ldr	r3, [pc, #132]	; (8000928 <Flash_Erase+0xd0>)
 80008a4:	4a22      	ldr	r2, [pc, #136]	; (8000930 <Flash_Erase+0xd8>)
 80008a6:	605a      	str	r2, [r3, #4]
    clear_bit(FLASH->CR, FLASH_PSIZE_SELECT);
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <Flash_Erase+0xd0>)
 80008aa:	691b      	ldr	r3, [r3, #16]
 80008ac:	4a1e      	ldr	r2, [pc, #120]	; (8000928 <Flash_Erase+0xd0>)
 80008ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008b2:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize << (8);
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <Flash_Erase+0xd0>)
 80008b6:	691a      	ldr	r2, [r3, #16]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	021b      	lsls	r3, r3, #8
 80008bc:	491a      	ldr	r1, [pc, #104]	; (8000928 <Flash_Erase+0xd0>)
 80008be:	4313      	orrs	r3, r2
 80008c0:	610b      	str	r3, [r1, #16]
    clear_bit(FLASH->CR, FLASH_SNB_SELECT);
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <Flash_Erase+0xd0>)
 80008c4:	691b      	ldr	r3, [r3, #16]
 80008c6:	4a18      	ldr	r2, [pc, #96]	; (8000928 <Flash_Erase+0xd0>)
 80008c8:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 80008cc:	6113      	str	r3, [r2, #16]
    FLASH->CR |= (eraseinit->sector << (FLASH_SNB_POS));
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <Flash_Erase+0xd0>)
 80008d0:	691b      	ldr	r3, [r3, #16]
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	7812      	ldrb	r2, [r2, #0]
 80008d6:	00d2      	lsls	r2, r2, #3
 80008d8:	4611      	mov	r1, r2
 80008da:	4a13      	ldr	r2, [pc, #76]	; (8000928 <Flash_Erase+0xd0>)
 80008dc:	430b      	orrs	r3, r1
 80008de:	6113      	str	r3, [r2, #16]
    set_bit(FLASH->CR, (FLASH_SER_SELECT | FLASH_START_SELECT));
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <Flash_Erase+0xd0>)
 80008e2:	691b      	ldr	r3, [r3, #16]
 80008e4:	4a10      	ldr	r2, [pc, #64]	; (8000928 <Flash_Erase+0xd0>)
 80008e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ea:	f043 0302 	orr.w	r3, r3, #2
 80008ee:	6113      	str	r3, [r2, #16]
    WaitBusy_Flash();
 80008f0:	bf00      	nop
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <Flash_Erase+0xd0>)
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d1f9      	bne.n	80008f2 <Flash_Erase+0x9a>
    clear_bit(FLASH->CR,
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <Flash_Erase+0xd0>)
 8000900:	691b      	ldr	r3, [r3, #16]
 8000902:	4a09      	ldr	r2, [pc, #36]	; (8000928 <Flash_Erase+0xd0>)
 8000904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000908:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 800090c:	6113      	str	r3, [r2, #16]
            (FLASH_SER_SELECT | FLASH_SNB_SELECT | FLASH_START_SELECT));
    Flash_LockKey();
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <Flash_Erase+0xd0>)
 8000910:	691b      	ldr	r3, [r3, #16]
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <Flash_Erase+0xd0>)
 8000914:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000918:	6113      	str	r3, [r2, #16]

}
 800091a:	bf00      	nop
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40023c00 	.word	0x40023c00
 800092c:	45670123 	.word	0x45670123
 8000930:	cdef89ab 	.word	0xcdef89ab

08000934 <GPIO_Config>:
void RESET_GPIO(GPIO_TypeDef *GPIOx) {
    GPIOx->MODER = 0x00;
}

void GPIO_Config(GPIO_TypeDef *GPIOx, int pinnum, GPIO_ModeTypeDef mode,
        GPIO_PUPDTypeDef pupd, GPIO_AFTypeDef alternatefunction) {
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	4611      	mov	r1, r2
 8000940:	461a      	mov	r2, r3
 8000942:	460b      	mov	r3, r1
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	4613      	mov	r3, r2
 8000948:	71bb      	strb	r3, [r7, #6]
    GPIOx->MODER |= mode << (2 * pinnum);
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	79f9      	ldrb	r1, [r7, #7]
 8000950:	68ba      	ldr	r2, [r7, #8]
 8000952:	0052      	lsls	r2, r2, #1
 8000954:	fa01 f202 	lsl.w	r2, r1, r2
 8000958:	431a      	orrs	r2, r3
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	601a      	str	r2, [r3, #0]
    GPIOx->PUPDR |= pupd << (2 * pinnum);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	79b9      	ldrb	r1, [r7, #6]
 8000964:	68ba      	ldr	r2, [r7, #8]
 8000966:	0052      	lsls	r2, r2, #1
 8000968:	fa01 f202 	lsl.w	r2, r1, r2
 800096c:	431a      	orrs	r2, r3
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	60da      	str	r2, [r3, #12]

    if (mode == Alternate_Mode) {
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b02      	cmp	r3, #2
 8000976:	d119      	bne.n	80009ac <GPIO_Config+0x78>
        GPIOx->AFR[pinnum >> 3] |= alternatefunction << ((pinnum % 8) * 4);
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	10da      	asrs	r2, r3, #3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	3208      	adds	r2, #8
 8000980:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000984:	7e3a      	ldrb	r2, [r7, #24]
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	4258      	negs	r0, r3
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	f000 0007 	and.w	r0, r0, #7
 8000992:	bf58      	it	pl
 8000994:	4243      	negpl	r3, r0
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	4618      	mov	r0, r3
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	10da      	asrs	r2, r3, #3
 80009a2:	4301      	orrs	r1, r0
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3208      	adds	r2, #8
 80009a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    }
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <GPIO_Deinit>:

void GPIO_Deinit(GPIO_TypeDef *GPIOx, int pinnum) {
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
    GPIOx->MODER &= ~(11 << (2 * pinnum));
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	0052      	lsls	r2, r2, #1
 80009ca:	210b      	movs	r1, #11
 80009cc:	fa01 f202 	lsl.w	r2, r1, r2
 80009d0:	43d2      	mvns	r2, r2
 80009d2:	401a      	ands	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	601a      	str	r2, [r3, #0]
    GPIOx->PUPDR &= ~(11 << (2 * pinnum));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	683a      	ldr	r2, [r7, #0]
 80009de:	0052      	lsls	r2, r2, #1
 80009e0:	210b      	movs	r1, #11
 80009e2:	fa01 f202 	lsl.w	r2, r1, r2
 80009e6:	43d2      	mvns	r2, r2
 80009e8:	401a      	ands	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	60da      	str	r2, [r3, #12]
    GPIOx->AFR[pinnum >> 3] &= ~( 1111 << ((pinnum % 8) * 4));
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	10da      	asrs	r2, r3, #3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3208      	adds	r2, #8
 80009f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	425a      	negs	r2, r3
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	f002 0207 	and.w	r2, r2, #7
 8000a06:	bf58      	it	pl
 8000a08:	4253      	negpl	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	f240 4257 	movw	r2, #1111	; 0x457
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	43db      	mvns	r3, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	10da      	asrs	r2, r3, #3
 8000a1c:	4001      	ands	r1, r0
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	3208      	adds	r2, #8
 8000a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <GPIO_Read>:

void GPIO_Toggle(GPIO_TypeDef *GPIOx, int pinnum) {
    GPIOx->ODR ^= 1 << (pinnum);
}

uint8_t GPIO_Read(GPIO_TypeDef *GPIOx, int pinnum) {
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	6039      	str	r1, [r7, #0]
    if (GPIOx->IDR & 1 << (pinnum)) {
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	691b      	ldr	r3, [r3, #16]
 8000a40:	2101      	movs	r1, #1
 8000a42:	683a      	ldr	r2, [r7, #0]
 8000a44:	fa01 f202 	lsl.w	r2, r1, r2
 8000a48:	4013      	ands	r3, r2
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <GPIO_Read+0x20>
        return 1;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e000      	b.n	8000a54 <GPIO_Read+0x22>
    } else {
        return 0;
 8000a52:	2300      	movs	r3, #0
    }

}
 8000a54:	4618      	mov	r0, r3
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <sd_init>:

/*
 * Initialise the SD-Card
 * Sending 10 dummy byte before sending any command
 */
void sd_init(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0

    dummy_byte();
 8000a66:	f000 f90b 	bl	8000c80 <dummy_byte>

    uint8_t cmd[] = { 0x40 | 0x00 /* CMD0 */, 0x00, 0x00, 0x00,
 8000a6a:	4a39      	ldr	r2, [pc, #228]	; (8000b50 <sd_init+0xf0>)
 8000a6c:	f107 0320 	add.w	r3, r7, #32
 8000a70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a74:	6018      	str	r0, [r3, #0]
 8000a76:	3304      	adds	r3, #4
 8000a78:	8019      	strh	r1, [r3, #0]
            0x00 /* ARG = 0 */, 0x95 /* CRC7 + end bit */};
    sd_sendSPI(SPI1, cmd, sizeof(cmd));
 8000a7a:	f107 0320 	add.w	r3, r7, #32
 8000a7e:	2206      	movs	r2, #6
 8000a80:	4619      	mov	r1, r3
 8000a82:	4834      	ldr	r0, [pc, #208]	; (8000b54 <sd_init+0xf4>)
 8000a84:	f000 f8c6 	bl	8000c14 <sd_sendSPI>

    SPI_Receivedata(SPI1, spi_rx_buffer, 1);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4933      	ldr	r1, [pc, #204]	; (8000b58 <sd_init+0xf8>)
 8000a8c:	4831      	ldr	r0, [pc, #196]	; (8000b54 <sd_init+0xf4>)
 8000a8e:	f000 f96f 	bl	8000d70 <SPI_Receivedata>

    dummy_byte();
 8000a92:	f000 f8f5 	bl	8000c80 <dummy_byte>

    uint8_t cmd8[] = { 0x40 | 0x08, 0x00, 0x00, 0x01, 0xAA, 0x87 };
 8000a96:	4a31      	ldr	r2, [pc, #196]	; (8000b5c <sd_init+0xfc>)
 8000a98:	f107 0318 	add.w	r3, r7, #24
 8000a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aa0:	6018      	str	r0, [r3, #0]
 8000aa2:	3304      	adds	r3, #4
 8000aa4:	8019      	strh	r1, [r3, #0]
    sd_sendSPI(SPI1, cmd8, sizeof(cmd8));
 8000aa6:	f107 0318 	add.w	r3, r7, #24
 8000aaa:	2206      	movs	r2, #6
 8000aac:	4619      	mov	r1, r3
 8000aae:	4829      	ldr	r0, [pc, #164]	; (8000b54 <sd_init+0xf4>)
 8000ab0:	f000 f8b0 	bl	8000c14 <sd_sendSPI>

    SPI_Receivedata(SPI1, spi_rx_buffer, 5);
 8000ab4:	2205      	movs	r2, #5
 8000ab6:	4928      	ldr	r1, [pc, #160]	; (8000b58 <sd_init+0xf8>)
 8000ab8:	4826      	ldr	r0, [pc, #152]	; (8000b54 <sd_init+0xf4>)
 8000aba:	f000 f959 	bl	8000d70 <SPI_Receivedata>

    do {
        dummy_byte();
 8000abe:	f000 f8df 	bl	8000c80 <dummy_byte>
        uint8_t cmd55[] = { 0x40 | 0x37 /* CMD55 */, 0x00, 0x00, 0x00,
 8000ac2:	4a27      	ldr	r2, [pc, #156]	; (8000b60 <sd_init+0x100>)
 8000ac4:	f107 0308 	add.w	r3, r7, #8
 8000ac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000acc:	6018      	str	r0, [r3, #0]
 8000ace:	3304      	adds	r3, #4
 8000ad0:	8019      	strh	r1, [r3, #0]
                0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */};
        sd_sendSPI(SPI1, cmd55, sizeof(cmd55));
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	2206      	movs	r2, #6
 8000ad8:	4619      	mov	r1, r3
 8000ada:	481e      	ldr	r0, [pc, #120]	; (8000b54 <sd_init+0xf4>)
 8000adc:	f000 f89a 	bl	8000c14 <sd_sendSPI>

        SPI_Receivedata(SPI1, spi_rx_buffer, 6);
 8000ae0:	2206      	movs	r2, #6
 8000ae2:	491d      	ldr	r1, [pc, #116]	; (8000b58 <sd_init+0xf8>)
 8000ae4:	481b      	ldr	r0, [pc, #108]	; (8000b54 <sd_init+0xf4>)
 8000ae6:	f000 f943 	bl	8000d70 <SPI_Receivedata>

        dummy_byte();
 8000aea:	f000 f8c9 	bl	8000c80 <dummy_byte>

        uint8_t cmd41[] = { 0x40 | 0x29 /* ACMD41 */, 0x40, 0x00, 0x00,
 8000aee:	4a1d      	ldr	r2, [pc, #116]	; (8000b64 <sd_init+0x104>)
 8000af0:	463b      	mov	r3, r7
 8000af2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000af6:	6018      	str	r0, [r3, #0]
 8000af8:	3304      	adds	r3, #4
 8000afa:	8019      	strh	r1, [r3, #0]
                0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */};
        sd_sendSPI(SPI1, cmd41, sizeof(cmd41));
 8000afc:	463b      	mov	r3, r7
 8000afe:	2206      	movs	r2, #6
 8000b00:	4619      	mov	r1, r3
 8000b02:	4814      	ldr	r0, [pc, #80]	; (8000b54 <sd_init+0xf4>)
 8000b04:	f000 f886 	bl	8000c14 <sd_sendSPI>
        SPI_Receivedata(SPI1, spi_rx_buffer, 6);
 8000b08:	2206      	movs	r2, #6
 8000b0a:	4913      	ldr	r1, [pc, #76]	; (8000b58 <sd_init+0xf8>)
 8000b0c:	4811      	ldr	r0, [pc, #68]	; (8000b54 <sd_init+0xf4>)
 8000b0e:	f000 f92f 	bl	8000d70 <SPI_Receivedata>

    } while (*spi_rx_buffer != 0x00); //wait while response is 0x00 from Card
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <sd_init+0xf8>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d1d1      	bne.n	8000abe <sd_init+0x5e>

    dummy_byte();
 8000b1a:	f000 f8b1 	bl	8000c80 <dummy_byte>
    uint8_t cmd58[] = { 0x40 | 0x3A /* CMD58 */, 0x00, 0x00, 0x00,
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <sd_init+0x108>)
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b28:	6018      	str	r0, [r3, #0]
 8000b2a:	3304      	adds	r3, #4
 8000b2c:	8019      	strh	r1, [r3, #0]
            0x00 /* ARG */, (0x7F << 1) | 1 /* CRC7 + end bit */};
    sd_sendSPI(SPI1, cmd58, sizeof(cmd58));
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	2206      	movs	r2, #6
 8000b34:	4619      	mov	r1, r3
 8000b36:	4807      	ldr	r0, [pc, #28]	; (8000b54 <sd_init+0xf4>)
 8000b38:	f000 f86c 	bl	8000c14 <sd_sendSPI>
    SPI_Receivedata(SPI1, spi_rx_buffer, 6);
 8000b3c:	2206      	movs	r2, #6
 8000b3e:	4906      	ldr	r1, [pc, #24]	; (8000b58 <sd_init+0xf8>)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <sd_init+0xf4>)
 8000b42:	f000 f915 	bl	8000d70 <SPI_Receivedata>

}
 8000b46:	bf00      	nop
 8000b48:	3728      	adds	r7, #40	; 0x28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	08001900 	.word	0x08001900
 8000b54:	40013000 	.word	0x40013000
 8000b58:	200002a8 	.word	0x200002a8
 8000b5c:	08001908 	.word	0x08001908
 8000b60:	08001910 	.word	0x08001910
 8000b64:	08001918 	.word	0x08001918
 8000b68:	08001920 	.word	0x08001920

08000b6c <sd_readsingleblock>:

/*
 * Read a block from SD-Card from given physical address
 *
 */
void sd_readsingleblock(uint32_t blockNum, uint8_t *buffer) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]

    dummy_byte();
 8000b76:	f000 f883 	bl	8000c80 <dummy_byte>

    uint8_t cmd16[] = { 0x40 | 0x10, 0x00, 0x00, 0x02, 0x00, 0xFF };
 8000b7a:	4a23      	ldr	r2, [pc, #140]	; (8000c08 <sd_readsingleblock+0x9c>)
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b84:	6018      	str	r0, [r3, #0]
 8000b86:	3304      	adds	r3, #4
 8000b88:	8019      	strh	r1, [r3, #0]
    sd_sendSPI(SPI1, cmd16, sizeof(cmd16));
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	2206      	movs	r2, #6
 8000b90:	4619      	mov	r1, r3
 8000b92:	481e      	ldr	r0, [pc, #120]	; (8000c0c <sd_readsingleblock+0xa0>)
 8000b94:	f000 f83e 	bl	8000c14 <sd_sendSPI>
    SPI_Receivedata(SPI1, spi_rx_buffer, 6);
 8000b98:	2206      	movs	r2, #6
 8000b9a:	491d      	ldr	r1, [pc, #116]	; (8000c10 <sd_readsingleblock+0xa4>)
 8000b9c:	481b      	ldr	r0, [pc, #108]	; (8000c0c <sd_readsingleblock+0xa0>)
 8000b9e:	f000 f8e7 	bl	8000d70 <SPI_Receivedata>

    dummy_byte();
 8000ba2:	f000 f86d 	bl	8000c80 <dummy_byte>

    uint8_t cmd17[] = { 0x40 | 0x11, (blockNum >> 24) & 0xFF, /* ARG */
 8000ba6:	2351      	movs	r3, #81	; 0x51
 8000ba8:	723b      	strb	r3, [r7, #8]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	0e1b      	lsrs	r3, r3, #24
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	727b      	strb	r3, [r7, #9]
    (blockNum >> 16) & 0xFF, (blockNum >> 8) & 0xFF, blockNum & 0xFF,
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd17[] = { 0x40 | 0x11, (blockNum >> 24) & 0xFF, /* ARG */
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	72bb      	strb	r3, [r7, #10]
    (blockNum >> 16) & 0xFF, (blockNum >> 8) & 0xFF, blockNum & 0xFF,
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd17[] = { 0x40 | 0x11, (blockNum >> 24) & 0xFF, /* ARG */
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	72fb      	strb	r3, [r7, #11]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	733b      	strb	r3, [r7, #12]
 8000bc8:	23ff      	movs	r3, #255	; 0xff
 8000bca:	737b      	strb	r3, [r7, #13]
            (0x7F << 1) | 1 };

    sd_sendSPI(SPI1, cmd17, sizeof(cmd17));
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	2206      	movs	r2, #6
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <sd_readsingleblock+0xa0>)
 8000bd6:	f000 f81d 	bl	8000c14 <sd_sendSPI>
    SPI_Receivedata(SPI1, spi_rx_buffer, 5);
 8000bda:	2205      	movs	r2, #5
 8000bdc:	490c      	ldr	r1, [pc, #48]	; (8000c10 <sd_readsingleblock+0xa4>)
 8000bde:	480b      	ldr	r0, [pc, #44]	; (8000c0c <sd_readsingleblock+0xa0>)
 8000be0:	f000 f8c6 	bl	8000d70 <SPI_Receivedata>

    uint8_t dataToken = 0xFE;
 8000be4:	23fe      	movs	r3, #254	; 0xfe
 8000be6:	75fb      	strb	r3, [r7, #23]
    wait_fortoken(dataToken);
 8000be8:	7dfb      	ldrb	r3, [r7, #23]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f832 	bl	8000c54 <wait_fortoken>

    SPI_Receivedataall(SPI1, buffer, 512);
 8000bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf4:	6839      	ldr	r1, [r7, #0]
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <sd_readsingleblock+0xa0>)
 8000bf8:	f000 f8fc 	bl	8000df4 <SPI_Receivedataall>

    delay1();
 8000bfc:	f7ff fc36 	bl	800046c <delay1>

}
 8000c00:	bf00      	nop
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	08001928 	.word	0x08001928
 8000c0c:	40013000 	.word	0x40013000
 8000c10:	200002a8 	.word	0x200002a8

08000c14 <sd_sendSPI>:

/*
 * Send SPI Commands
 *
 */
void sd_sendSPI(SPI_TypeDef *SPIx, uint8_t *pdata, uint16_t len) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	80fb      	strh	r3, [r7, #6]

    for (uint16_t i = 0; i < len; i++) {
 8000c22:	2300      	movs	r3, #0
 8000c24:	82fb      	strh	r3, [r7, #22]
 8000c26:	e00b      	b.n	8000c40 <sd_sendSPI+0x2c>
        SPI_Sendchar(SPI1, *(pdata));
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4808      	ldr	r0, [pc, #32]	; (8000c50 <sd_sendSPI+0x3c>)
 8000c30:	f000 f910 	bl	8000e54 <SPI_Sendchar>
        pdata++;
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	3301      	adds	r3, #1
 8000c38:	60bb      	str	r3, [r7, #8]
    for (uint16_t i = 0; i < len; i++) {
 8000c3a:	8afb      	ldrh	r3, [r7, #22]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	82fb      	strh	r3, [r7, #22]
 8000c40:	8afa      	ldrh	r2, [r7, #22]
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d3ef      	bcc.n	8000c28 <sd_sendSPI+0x14>
    }
}
 8000c48:	bf00      	nop
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40013000 	.word	0x40013000

08000c54 <wait_fortoken>:

void wait_fortoken(uint8_t Token) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
    do {
        SPI_Receivedataall(SPI1, spi_rx_buffer, 1);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4905      	ldr	r1, [pc, #20]	; (8000c78 <wait_fortoken+0x24>)
 8000c62:	4806      	ldr	r0, [pc, #24]	; (8000c7c <wait_fortoken+0x28>)
 8000c64:	f000 f8c6 	bl	8000df4 <SPI_Receivedataall>
    } while (*spi_rx_buffer != 0xFE);
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <wait_fortoken+0x24>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2bfe      	cmp	r3, #254	; 0xfe
 8000c6e:	d1f6      	bne.n	8000c5e <wait_fortoken+0xa>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200002a8 	.word	0x200002a8
 8000c7c:	40013000 	.word	0x40013000

08000c80 <dummy_byte>:

void dummy_byte(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
    CS_PIN_HIGH();
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <dummy_byte+0x48>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <dummy_byte+0x48>)
 8000c8c:	f043 0320 	orr.w	r3, r3, #32
 8000c90:	6153      	str	r3, [r2, #20]
    uint8_t high = 0xFF;
 8000c92:	23ff      	movs	r3, #255	; 0xff
 8000c94:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < 10; i++) {
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	e007      	b.n	8000cac <dummy_byte+0x2c>
        SPI_Sendchar(SPI1, high);
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480a      	ldr	r0, [pc, #40]	; (8000ccc <dummy_byte+0x4c>)
 8000ca2:	f000 f8d7 	bl	8000e54 <SPI_Sendchar>
    for (int i = 0; i < 10; i++) {
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b09      	cmp	r3, #9
 8000cb0:	ddf4      	ble.n	8000c9c <dummy_byte+0x1c>
    }
    CS_PIN_LOW();
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <dummy_byte+0x48>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <dummy_byte+0x48>)
 8000cb8:	f023 0320 	bic.w	r3, r3, #32
 8000cbc:	6153      	str	r3, [r2, #20]
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40020400 	.word	0x40020400
 8000ccc:	40013000 	.word	0x40013000

08000cd0 <SPI_Config>:
#include <sp_stm32_spi.h>

void SPI_Config(SPI_TypeDef *spix, SPI_BaudRateTypeDef baudratepslcr,
        SPI_BIDIModeTypeDef bidimode, SPI_FirstTypeDef firstmsblsb,
        SPI_DataFrameTypeDef dataframe, SPI_MasterTypeDef masterslave,
        SPI_BIDIOETypeDef receivetransmit) {
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	4608      	mov	r0, r1
 8000cda:	4611      	mov	r1, r2
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4603      	mov	r3, r0
 8000ce0:	70fb      	strb	r3, [r7, #3]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	70bb      	strb	r3, [r7, #2]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	707b      	strb	r3, [r7, #1]

    spix->CR1 |= baudratepslcr << (3) | firstmsblsb << (7) | dataframe << (11)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	78fa      	ldrb	r2, [r7, #3]
 8000cf0:	00d1      	lsls	r1, r2, #3
 8000cf2:	787a      	ldrb	r2, [r7, #1]
 8000cf4:	01d2      	lsls	r2, r2, #7
 8000cf6:	4311      	orrs	r1, r2
 8000cf8:	7c3a      	ldrb	r2, [r7, #16]
 8000cfa:	02d2      	lsls	r2, r2, #11
 8000cfc:	4311      	orrs	r1, r2
            | bidimode << (15) | masterslave << (2) | receivetransmit << (14)
 8000cfe:	78ba      	ldrb	r2, [r7, #2]
 8000d00:	03d2      	lsls	r2, r2, #15
 8000d02:	4311      	orrs	r1, r2
 8000d04:	7d3a      	ldrb	r2, [r7, #20]
 8000d06:	0092      	lsls	r2, r2, #2
 8000d08:	4311      	orrs	r1, r2
 8000d0a:	7e3a      	ldrb	r2, [r7, #24]
 8000d0c:	0392      	lsls	r2, r2, #14
 8000d0e:	430a      	orrs	r2, r1
    spix->CR1 |= baudratepslcr << (3) | firstmsblsb << (7) | dataframe << (11)
 8000d10:	4313      	orrs	r3, r2
 8000d12:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	601a      	str	r2, [r3, #0]
            | 1 << (8) | 1 << (9);
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <SPI_Enable>:

void SPI_Enable(SPI_TypeDef *spix) {
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
    spix->CR1 |= 1 << (6);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	601a      	str	r2, [r3, #0]

}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <SPI_TxBufferEmpty>:

void SPI_TxBufferEmpty(SPI_TypeDef *spix) {
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
    while (!(SPI1->SR & 1 << (1)))
 8000d50:	bf00      	nop
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <SPI_TxBufferEmpty+0x24>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0f9      	beq.n	8000d52 <SPI_TxBufferEmpty+0xa>
        ;

}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40013000 	.word	0x40013000

08000d70 <SPI_Receivedata>:

/*
 * In order to receive the response of command in SPI bus,
 * dummy data (0xFF) is sent twice after command.
 */
void SPI_Receivedata(SPI_TypeDef *spix, uint8_t *data, uint16_t len) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	80fb      	strh	r3, [r7, #6]

    SPI_TxBufferEmpty(SPI1);
 8000d7e:	481c      	ldr	r0, [pc, #112]	; (8000df0 <SPI_Receivedata+0x80>)
 8000d80:	f7ff ffe2 	bl	8000d48 <SPI_TxBufferEmpty>
    spix->DR = 0xFF;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	22ff      	movs	r2, #255	; 0xff
 8000d88:	60da      	str	r2, [r3, #12]
    WAIT_SPI_DATA_RECEIVE(SPI1);
 8000d8a:	bf00      	nop
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <SPI_Receivedata+0x80>)
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0f9      	beq.n	8000d8c <SPI_Receivedata+0x1c>
    *(data) = spix->DR;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	701a      	strb	r2, [r3, #0]

    for (uint16_t c = 0; c < len; c++) {
 8000da2:	2300      	movs	r3, #0
 8000da4:	82fb      	strh	r3, [r7, #22]
 8000da6:	e01a      	b.n	8000dde <SPI_Receivedata+0x6e>
        SPI_TxBufferEmpty(SPI1);
 8000da8:	4811      	ldr	r0, [pc, #68]	; (8000df0 <SPI_Receivedata+0x80>)
 8000daa:	f7ff ffcd 	bl	8000d48 <SPI_TxBufferEmpty>
        spix->DR = 0xFF;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	22ff      	movs	r2, #255	; 0xff
 8000db2:	60da      	str	r2, [r3, #12]
        SPI_TxBufferEmpty(SPI1);
 8000db4:	480e      	ldr	r0, [pc, #56]	; (8000df0 <SPI_Receivedata+0x80>)
 8000db6:	f7ff ffc7 	bl	8000d48 <SPI_TxBufferEmpty>
        WAIT_SPI_DATA_RECEIVE(SPI1);
 8000dba:	bf00      	nop
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <SPI_Receivedata+0x80>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d0f9      	beq.n	8000dbc <SPI_Receivedata+0x4c>
        *(data) = spix->DR;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	701a      	strb	r2, [r3, #0]
        data++;
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
    for (uint16_t c = 0; c < len; c++) {
 8000dd8:	8afb      	ldrh	r3, [r7, #22]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	82fb      	strh	r3, [r7, #22]
 8000dde:	8afa      	ldrh	r2, [r7, #22]
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d3e0      	bcc.n	8000da8 <SPI_Receivedata+0x38>
    }

}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40013000 	.word	0x40013000

08000df4 <SPI_Receivedataall>:

/*
 *Receive data direct after command
 *In order to receive data, must send dummy data for clock
 */
void SPI_Receivedataall(SPI_TypeDef *spix, uint8_t *data, uint16_t len) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	80fb      	strh	r3, [r7, #6]
    for (uint16_t c = 0; c < len; c++) {
 8000e02:	2300      	movs	r3, #0
 8000e04:	82fb      	strh	r3, [r7, #22]
 8000e06:	e01a      	b.n	8000e3e <SPI_Receivedataall+0x4a>
        SPI_TxBufferEmpty(SPI1);
 8000e08:	4811      	ldr	r0, [pc, #68]	; (8000e50 <SPI_Receivedataall+0x5c>)
 8000e0a:	f7ff ff9d 	bl	8000d48 <SPI_TxBufferEmpty>
        spix->DR = 0xFF;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	22ff      	movs	r2, #255	; 0xff
 8000e12:	60da      	str	r2, [r3, #12]
        SPI_TxBufferEmpty(SPI1);
 8000e14:	480e      	ldr	r0, [pc, #56]	; (8000e50 <SPI_Receivedataall+0x5c>)
 8000e16:	f7ff ff97 	bl	8000d48 <SPI_TxBufferEmpty>
        WAIT_SPI_DATA_RECEIVE(SPI1);
 8000e1a:	bf00      	nop
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <SPI_Receivedataall+0x5c>)
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0f9      	beq.n	8000e1c <SPI_Receivedataall+0x28>
        *(data) = spix->DR;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	701a      	strb	r2, [r3, #0]
        data++;
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	3301      	adds	r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
    for (uint16_t c = 0; c < len; c++) {
 8000e38:	8afb      	ldrh	r3, [r7, #22]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	82fb      	strh	r3, [r7, #22]
 8000e3e:	8afa      	ldrh	r2, [r7, #22]
 8000e40:	88fb      	ldrh	r3, [r7, #6]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d3e0      	bcc.n	8000e08 <SPI_Receivedataall+0x14>
    }
}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40013000 	.word	0x40013000

08000e54 <SPI_Sendchar>:

/*
 *While sending SPI-data, the receive buffer register must be
 *read to prevent the overflow. Sending and Receiving is simultaneous.
 */
void SPI_Sendchar(SPI_TypeDef *spix, uint8_t data) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	70fb      	strb	r3, [r7, #3]

    uint8_t demo;
    SPI_TxBufferEmpty(SPI1);
 8000e60:	4809      	ldr	r0, [pc, #36]	; (8000e88 <SPI_Sendchar+0x34>)
 8000e62:	f7ff ff71 	bl	8000d48 <SPI_TxBufferEmpty>
    spix->DR = data;
 8000e66:	78fa      	ldrb	r2, [r7, #3]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	60da      	str	r2, [r3, #12]
    WAIT_SPI_DATA_RECEIVE(SPI1);
 8000e6c:	bf00      	nop
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <SPI_Sendchar+0x34>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0f9      	beq.n	8000e6e <SPI_Sendchar+0x1a>
    demo = spix->DR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	73fb      	strb	r3, [r7, #15]
}
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40013000 	.word	0x40013000

08000e8c <USART_Config>:
 *      Author: sijan pahari
 */

#include <sp_stm32_uart.h>

void USART_Config(USART_TypeDef *USARTx, USART_ConfigTypedef huartx) {
 8000e8c:	b084      	sub	sp, #16
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	f107 0014 	add.w	r0, r7, #20
 8000e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}

    USARTx->CR1 |= (uint32_t) huartx.Mode | huartx.Oversampling_Mode
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	6979      	ldr	r1, [r7, #20]
 8000ea4:	6a3b      	ldr	r3, [r7, #32]
 8000ea6:	4319      	orrs	r1, r3
            | huartx.Parity_Control | huartx.Parity_Selection;
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	4319      	orrs	r1, r3
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	430b      	orrs	r3, r1
    USARTx->CR1 |= (uint32_t) huartx.Mode | huartx.Oversampling_Mode
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60da      	str	r2, [r3, #12]
    USARTx->BRR = huartx.Baudrate;
 8000eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	609a      	str	r2, [r3, #8]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	b004      	add	sp, #16
 8000ec8:	4770      	bx	lr

08000eca <USART_Enable>:

void USART_Enable(USART_TypeDef *USARTx) {
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
    USARTx->CR1 |= 1 << (13);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60da      	str	r2, [r3, #12]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <USART_SendChar>:

void USART_SendChar(USART_TypeDef *USARTx, char data) {
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	70fb      	strb	r3, [r7, #3]
    while (!(USARTx->SR & 1 << (6)))
 8000ef6:	bf00      	nop
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f9      	beq.n	8000ef8 <USART_SendChar+0xe>
        ;
    USARTx->DR = data;
 8000f04:	78fa      	ldrb	r2, [r7, #3]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	605a      	str	r2, [r3, #4]
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <USART_SendString>:

void USART_SendString(USART_TypeDef *USARTx, char *string) {
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	6039      	str	r1, [r7, #0]

    while (*string) {
 8000f20:	e008      	b.n	8000f34 <USART_SendString+0x1e>
        USART_SendChar(USARTx, *string);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	4619      	mov	r1, r3
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff ffde 	bl	8000eea <USART_SendChar>
        string++;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	3301      	adds	r3, #1
 8000f32:	603b      	str	r3, [r7, #0]
    while (*string) {
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1f2      	bne.n	8000f22 <USART_SendString+0xc>
    }
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <USART_Receive>:


void USART_Receive(USART_TypeDef *USARTx, uint8_t *string, uint8_t len) {
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	71fb      	strb	r3, [r7, #7]

    for (uint8_t i = 0; i < len; i++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	75fb      	strb	r3, [r7, #23]
 8000f56:	e011      	b.n	8000f7c <USART_Receive+0x38>
        WAIT_DATA_RECEIVE(USART2);
 8000f58:	bf00      	nop
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <USART_Receive+0x4c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0f9      	beq.n	8000f5a <USART_Receive+0x16>
        *string = Receive_UART(USART2);
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <USART_Receive+0x4c>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	701a      	strb	r2, [r3, #0]
        string++;
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	3301      	adds	r3, #1
 8000f74:	60bb      	str	r3, [r7, #8]
    for (uint8_t i = 0; i < len; i++) {
 8000f76:	7dfb      	ldrb	r3, [r7, #23]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	75fb      	strb	r3, [r7, #23]
 8000f7c:	7dfa      	ldrb	r2, [r7, #23]
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d3e9      	bcc.n	8000f58 <USART_Receive+0x14>
    }
}
 8000f84:	bf00      	nop
 8000f86:	371c      	adds	r7, #28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	40004400 	.word	0x40004400

08000f94 <printmsg>:

/* prints formatted string to console over UART */
void printmsg(USART_TypeDef *USARTx, char *format, ...) {
 8000f94:	b40e      	push	{r1, r2, r3}
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b099      	sub	sp, #100	; 0x64
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
    char str[80];

    /*Extract the the argument list using VA apis */
    va_list args;
    va_start(args, format);
 8000f9e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fa2:	60fb      	str	r3, [r7, #12]
    vsprintf(str, format, args);
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 f84d 	bl	800104c <vsiprintf>
    USART_SendString(USARTx, str);
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ffac 	bl	8000f16 <USART_SendString>
    va_end(args);

}
 8000fbe:	bf00      	nop
 8000fc0:	3764      	adds	r7, #100	; 0x64
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fc8:	b003      	add	sp, #12
 8000fca:	4770      	bx	lr

08000fcc <__errno>:
 8000fcc:	4b01      	ldr	r3, [pc, #4]	; (8000fd4 <__errno+0x8>)
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <__libc_init_array>:
 8000fd8:	b570      	push	{r4, r5, r6, lr}
 8000fda:	4e0d      	ldr	r6, [pc, #52]	; (8001010 <__libc_init_array+0x38>)
 8000fdc:	4c0d      	ldr	r4, [pc, #52]	; (8001014 <__libc_init_array+0x3c>)
 8000fde:	1ba4      	subs	r4, r4, r6
 8000fe0:	10a4      	asrs	r4, r4, #2
 8000fe2:	2500      	movs	r5, #0
 8000fe4:	42a5      	cmp	r5, r4
 8000fe6:	d109      	bne.n	8000ffc <__libc_init_array+0x24>
 8000fe8:	4e0b      	ldr	r6, [pc, #44]	; (8001018 <__libc_init_array+0x40>)
 8000fea:	4c0c      	ldr	r4, [pc, #48]	; (800101c <__libc_init_array+0x44>)
 8000fec:	f000 fc1e 	bl	800182c <_init>
 8000ff0:	1ba4      	subs	r4, r4, r6
 8000ff2:	10a4      	asrs	r4, r4, #2
 8000ff4:	2500      	movs	r5, #0
 8000ff6:	42a5      	cmp	r5, r4
 8000ff8:	d105      	bne.n	8001006 <__libc_init_array+0x2e>
 8000ffa:	bd70      	pop	{r4, r5, r6, pc}
 8000ffc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001000:	4798      	blx	r3
 8001002:	3501      	adds	r5, #1
 8001004:	e7ee      	b.n	8000fe4 <__libc_init_array+0xc>
 8001006:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800100a:	4798      	blx	r3
 800100c:	3501      	adds	r5, #1
 800100e:	e7f2      	b.n	8000ff6 <__libc_init_array+0x1e>
 8001010:	08001968 	.word	0x08001968
 8001014:	08001968 	.word	0x08001968
 8001018:	08001968 	.word	0x08001968
 800101c:	0800196c 	.word	0x0800196c

08001020 <_vsiprintf_r>:
 8001020:	b500      	push	{lr}
 8001022:	b09b      	sub	sp, #108	; 0x6c
 8001024:	9100      	str	r1, [sp, #0]
 8001026:	9104      	str	r1, [sp, #16]
 8001028:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800102c:	9105      	str	r1, [sp, #20]
 800102e:	9102      	str	r1, [sp, #8]
 8001030:	4905      	ldr	r1, [pc, #20]	; (8001048 <_vsiprintf_r+0x28>)
 8001032:	9103      	str	r1, [sp, #12]
 8001034:	4669      	mov	r1, sp
 8001036:	f000 f86d 	bl	8001114 <_svfiprintf_r>
 800103a:	9b00      	ldr	r3, [sp, #0]
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	b01b      	add	sp, #108	; 0x6c
 8001042:	f85d fb04 	ldr.w	pc, [sp], #4
 8001046:	bf00      	nop
 8001048:	ffff0208 	.word	0xffff0208

0800104c <vsiprintf>:
 800104c:	4613      	mov	r3, r2
 800104e:	460a      	mov	r2, r1
 8001050:	4601      	mov	r1, r0
 8001052:	4802      	ldr	r0, [pc, #8]	; (800105c <vsiprintf+0x10>)
 8001054:	6800      	ldr	r0, [r0, #0]
 8001056:	f7ff bfe3 	b.w	8001020 <_vsiprintf_r>
 800105a:	bf00      	nop
 800105c:	20000004 	.word	0x20000004

08001060 <__ssputs_r>:
 8001060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001064:	688e      	ldr	r6, [r1, #8]
 8001066:	429e      	cmp	r6, r3
 8001068:	4682      	mov	sl, r0
 800106a:	460c      	mov	r4, r1
 800106c:	4690      	mov	r8, r2
 800106e:	4699      	mov	r9, r3
 8001070:	d837      	bhi.n	80010e2 <__ssputs_r+0x82>
 8001072:	898a      	ldrh	r2, [r1, #12]
 8001074:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001078:	d031      	beq.n	80010de <__ssputs_r+0x7e>
 800107a:	6825      	ldr	r5, [r4, #0]
 800107c:	6909      	ldr	r1, [r1, #16]
 800107e:	1a6f      	subs	r7, r5, r1
 8001080:	6965      	ldr	r5, [r4, #20]
 8001082:	2302      	movs	r3, #2
 8001084:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001088:	fb95 f5f3 	sdiv	r5, r5, r3
 800108c:	f109 0301 	add.w	r3, r9, #1
 8001090:	443b      	add	r3, r7
 8001092:	429d      	cmp	r5, r3
 8001094:	bf38      	it	cc
 8001096:	461d      	movcc	r5, r3
 8001098:	0553      	lsls	r3, r2, #21
 800109a:	d530      	bpl.n	80010fe <__ssputs_r+0x9e>
 800109c:	4629      	mov	r1, r5
 800109e:	f000 fb2b 	bl	80016f8 <_malloc_r>
 80010a2:	4606      	mov	r6, r0
 80010a4:	b950      	cbnz	r0, 80010bc <__ssputs_r+0x5c>
 80010a6:	230c      	movs	r3, #12
 80010a8:	f8ca 3000 	str.w	r3, [sl]
 80010ac:	89a3      	ldrh	r3, [r4, #12]
 80010ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b2:	81a3      	strh	r3, [r4, #12]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010bc:	463a      	mov	r2, r7
 80010be:	6921      	ldr	r1, [r4, #16]
 80010c0:	f000 faa8 	bl	8001614 <memcpy>
 80010c4:	89a3      	ldrh	r3, [r4, #12]
 80010c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80010ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ce:	81a3      	strh	r3, [r4, #12]
 80010d0:	6126      	str	r6, [r4, #16]
 80010d2:	6165      	str	r5, [r4, #20]
 80010d4:	443e      	add	r6, r7
 80010d6:	1bed      	subs	r5, r5, r7
 80010d8:	6026      	str	r6, [r4, #0]
 80010da:	60a5      	str	r5, [r4, #8]
 80010dc:	464e      	mov	r6, r9
 80010de:	454e      	cmp	r6, r9
 80010e0:	d900      	bls.n	80010e4 <__ssputs_r+0x84>
 80010e2:	464e      	mov	r6, r9
 80010e4:	4632      	mov	r2, r6
 80010e6:	4641      	mov	r1, r8
 80010e8:	6820      	ldr	r0, [r4, #0]
 80010ea:	f000 fa9e 	bl	800162a <memmove>
 80010ee:	68a3      	ldr	r3, [r4, #8]
 80010f0:	1b9b      	subs	r3, r3, r6
 80010f2:	60a3      	str	r3, [r4, #8]
 80010f4:	6823      	ldr	r3, [r4, #0]
 80010f6:	441e      	add	r6, r3
 80010f8:	6026      	str	r6, [r4, #0]
 80010fa:	2000      	movs	r0, #0
 80010fc:	e7dc      	b.n	80010b8 <__ssputs_r+0x58>
 80010fe:	462a      	mov	r2, r5
 8001100:	f000 fb54 	bl	80017ac <_realloc_r>
 8001104:	4606      	mov	r6, r0
 8001106:	2800      	cmp	r0, #0
 8001108:	d1e2      	bne.n	80010d0 <__ssputs_r+0x70>
 800110a:	6921      	ldr	r1, [r4, #16]
 800110c:	4650      	mov	r0, sl
 800110e:	f000 faa5 	bl	800165c <_free_r>
 8001112:	e7c8      	b.n	80010a6 <__ssputs_r+0x46>

08001114 <_svfiprintf_r>:
 8001114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001118:	461d      	mov	r5, r3
 800111a:	898b      	ldrh	r3, [r1, #12]
 800111c:	061f      	lsls	r7, r3, #24
 800111e:	b09d      	sub	sp, #116	; 0x74
 8001120:	4680      	mov	r8, r0
 8001122:	460c      	mov	r4, r1
 8001124:	4616      	mov	r6, r2
 8001126:	d50f      	bpl.n	8001148 <_svfiprintf_r+0x34>
 8001128:	690b      	ldr	r3, [r1, #16]
 800112a:	b96b      	cbnz	r3, 8001148 <_svfiprintf_r+0x34>
 800112c:	2140      	movs	r1, #64	; 0x40
 800112e:	f000 fae3 	bl	80016f8 <_malloc_r>
 8001132:	6020      	str	r0, [r4, #0]
 8001134:	6120      	str	r0, [r4, #16]
 8001136:	b928      	cbnz	r0, 8001144 <_svfiprintf_r+0x30>
 8001138:	230c      	movs	r3, #12
 800113a:	f8c8 3000 	str.w	r3, [r8]
 800113e:	f04f 30ff 	mov.w	r0, #4294967295
 8001142:	e0c8      	b.n	80012d6 <_svfiprintf_r+0x1c2>
 8001144:	2340      	movs	r3, #64	; 0x40
 8001146:	6163      	str	r3, [r4, #20]
 8001148:	2300      	movs	r3, #0
 800114a:	9309      	str	r3, [sp, #36]	; 0x24
 800114c:	2320      	movs	r3, #32
 800114e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001152:	2330      	movs	r3, #48	; 0x30
 8001154:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001158:	9503      	str	r5, [sp, #12]
 800115a:	f04f 0b01 	mov.w	fp, #1
 800115e:	4637      	mov	r7, r6
 8001160:	463d      	mov	r5, r7
 8001162:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001166:	b10b      	cbz	r3, 800116c <_svfiprintf_r+0x58>
 8001168:	2b25      	cmp	r3, #37	; 0x25
 800116a:	d13e      	bne.n	80011ea <_svfiprintf_r+0xd6>
 800116c:	ebb7 0a06 	subs.w	sl, r7, r6
 8001170:	d00b      	beq.n	800118a <_svfiprintf_r+0x76>
 8001172:	4653      	mov	r3, sl
 8001174:	4632      	mov	r2, r6
 8001176:	4621      	mov	r1, r4
 8001178:	4640      	mov	r0, r8
 800117a:	f7ff ff71 	bl	8001060 <__ssputs_r>
 800117e:	3001      	adds	r0, #1
 8001180:	f000 80a4 	beq.w	80012cc <_svfiprintf_r+0x1b8>
 8001184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001186:	4453      	add	r3, sl
 8001188:	9309      	str	r3, [sp, #36]	; 0x24
 800118a:	783b      	ldrb	r3, [r7, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 809d 	beq.w	80012cc <_svfiprintf_r+0x1b8>
 8001192:	2300      	movs	r3, #0
 8001194:	f04f 32ff 	mov.w	r2, #4294967295
 8001198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800119c:	9304      	str	r3, [sp, #16]
 800119e:	9307      	str	r3, [sp, #28]
 80011a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80011a4:	931a      	str	r3, [sp, #104]	; 0x68
 80011a6:	462f      	mov	r7, r5
 80011a8:	2205      	movs	r2, #5
 80011aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80011ae:	4850      	ldr	r0, [pc, #320]	; (80012f0 <_svfiprintf_r+0x1dc>)
 80011b0:	f7ff f82e 	bl	8000210 <memchr>
 80011b4:	9b04      	ldr	r3, [sp, #16]
 80011b6:	b9d0      	cbnz	r0, 80011ee <_svfiprintf_r+0xda>
 80011b8:	06d9      	lsls	r1, r3, #27
 80011ba:	bf44      	itt	mi
 80011bc:	2220      	movmi	r2, #32
 80011be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80011c2:	071a      	lsls	r2, r3, #28
 80011c4:	bf44      	itt	mi
 80011c6:	222b      	movmi	r2, #43	; 0x2b
 80011c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80011cc:	782a      	ldrb	r2, [r5, #0]
 80011ce:	2a2a      	cmp	r2, #42	; 0x2a
 80011d0:	d015      	beq.n	80011fe <_svfiprintf_r+0xea>
 80011d2:	9a07      	ldr	r2, [sp, #28]
 80011d4:	462f      	mov	r7, r5
 80011d6:	2000      	movs	r0, #0
 80011d8:	250a      	movs	r5, #10
 80011da:	4639      	mov	r1, r7
 80011dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80011e0:	3b30      	subs	r3, #48	; 0x30
 80011e2:	2b09      	cmp	r3, #9
 80011e4:	d94d      	bls.n	8001282 <_svfiprintf_r+0x16e>
 80011e6:	b1b8      	cbz	r0, 8001218 <_svfiprintf_r+0x104>
 80011e8:	e00f      	b.n	800120a <_svfiprintf_r+0xf6>
 80011ea:	462f      	mov	r7, r5
 80011ec:	e7b8      	b.n	8001160 <_svfiprintf_r+0x4c>
 80011ee:	4a40      	ldr	r2, [pc, #256]	; (80012f0 <_svfiprintf_r+0x1dc>)
 80011f0:	1a80      	subs	r0, r0, r2
 80011f2:	fa0b f000 	lsl.w	r0, fp, r0
 80011f6:	4318      	orrs	r0, r3
 80011f8:	9004      	str	r0, [sp, #16]
 80011fa:	463d      	mov	r5, r7
 80011fc:	e7d3      	b.n	80011a6 <_svfiprintf_r+0x92>
 80011fe:	9a03      	ldr	r2, [sp, #12]
 8001200:	1d11      	adds	r1, r2, #4
 8001202:	6812      	ldr	r2, [r2, #0]
 8001204:	9103      	str	r1, [sp, #12]
 8001206:	2a00      	cmp	r2, #0
 8001208:	db01      	blt.n	800120e <_svfiprintf_r+0xfa>
 800120a:	9207      	str	r2, [sp, #28]
 800120c:	e004      	b.n	8001218 <_svfiprintf_r+0x104>
 800120e:	4252      	negs	r2, r2
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	9207      	str	r2, [sp, #28]
 8001216:	9304      	str	r3, [sp, #16]
 8001218:	783b      	ldrb	r3, [r7, #0]
 800121a:	2b2e      	cmp	r3, #46	; 0x2e
 800121c:	d10c      	bne.n	8001238 <_svfiprintf_r+0x124>
 800121e:	787b      	ldrb	r3, [r7, #1]
 8001220:	2b2a      	cmp	r3, #42	; 0x2a
 8001222:	d133      	bne.n	800128c <_svfiprintf_r+0x178>
 8001224:	9b03      	ldr	r3, [sp, #12]
 8001226:	1d1a      	adds	r2, r3, #4
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	9203      	str	r2, [sp, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	bfb8      	it	lt
 8001230:	f04f 33ff 	movlt.w	r3, #4294967295
 8001234:	3702      	adds	r7, #2
 8001236:	9305      	str	r3, [sp, #20]
 8001238:	4d2e      	ldr	r5, [pc, #184]	; (80012f4 <_svfiprintf_r+0x1e0>)
 800123a:	7839      	ldrb	r1, [r7, #0]
 800123c:	2203      	movs	r2, #3
 800123e:	4628      	mov	r0, r5
 8001240:	f7fe ffe6 	bl	8000210 <memchr>
 8001244:	b138      	cbz	r0, 8001256 <_svfiprintf_r+0x142>
 8001246:	2340      	movs	r3, #64	; 0x40
 8001248:	1b40      	subs	r0, r0, r5
 800124a:	fa03 f000 	lsl.w	r0, r3, r0
 800124e:	9b04      	ldr	r3, [sp, #16]
 8001250:	4303      	orrs	r3, r0
 8001252:	3701      	adds	r7, #1
 8001254:	9304      	str	r3, [sp, #16]
 8001256:	7839      	ldrb	r1, [r7, #0]
 8001258:	4827      	ldr	r0, [pc, #156]	; (80012f8 <_svfiprintf_r+0x1e4>)
 800125a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800125e:	2206      	movs	r2, #6
 8001260:	1c7e      	adds	r6, r7, #1
 8001262:	f7fe ffd5 	bl	8000210 <memchr>
 8001266:	2800      	cmp	r0, #0
 8001268:	d038      	beq.n	80012dc <_svfiprintf_r+0x1c8>
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <_svfiprintf_r+0x1e8>)
 800126c:	bb13      	cbnz	r3, 80012b4 <_svfiprintf_r+0x1a0>
 800126e:	9b03      	ldr	r3, [sp, #12]
 8001270:	3307      	adds	r3, #7
 8001272:	f023 0307 	bic.w	r3, r3, #7
 8001276:	3308      	adds	r3, #8
 8001278:	9303      	str	r3, [sp, #12]
 800127a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800127c:	444b      	add	r3, r9
 800127e:	9309      	str	r3, [sp, #36]	; 0x24
 8001280:	e76d      	b.n	800115e <_svfiprintf_r+0x4a>
 8001282:	fb05 3202 	mla	r2, r5, r2, r3
 8001286:	2001      	movs	r0, #1
 8001288:	460f      	mov	r7, r1
 800128a:	e7a6      	b.n	80011da <_svfiprintf_r+0xc6>
 800128c:	2300      	movs	r3, #0
 800128e:	3701      	adds	r7, #1
 8001290:	9305      	str	r3, [sp, #20]
 8001292:	4619      	mov	r1, r3
 8001294:	250a      	movs	r5, #10
 8001296:	4638      	mov	r0, r7
 8001298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800129c:	3a30      	subs	r2, #48	; 0x30
 800129e:	2a09      	cmp	r2, #9
 80012a0:	d903      	bls.n	80012aa <_svfiprintf_r+0x196>
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0c8      	beq.n	8001238 <_svfiprintf_r+0x124>
 80012a6:	9105      	str	r1, [sp, #20]
 80012a8:	e7c6      	b.n	8001238 <_svfiprintf_r+0x124>
 80012aa:	fb05 2101 	mla	r1, r5, r1, r2
 80012ae:	2301      	movs	r3, #1
 80012b0:	4607      	mov	r7, r0
 80012b2:	e7f0      	b.n	8001296 <_svfiprintf_r+0x182>
 80012b4:	ab03      	add	r3, sp, #12
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	4622      	mov	r2, r4
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <_svfiprintf_r+0x1ec>)
 80012bc:	a904      	add	r1, sp, #16
 80012be:	4640      	mov	r0, r8
 80012c0:	f3af 8000 	nop.w
 80012c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80012c8:	4681      	mov	r9, r0
 80012ca:	d1d6      	bne.n	800127a <_svfiprintf_r+0x166>
 80012cc:	89a3      	ldrh	r3, [r4, #12]
 80012ce:	065b      	lsls	r3, r3, #25
 80012d0:	f53f af35 	bmi.w	800113e <_svfiprintf_r+0x2a>
 80012d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80012d6:	b01d      	add	sp, #116	; 0x74
 80012d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012dc:	ab03      	add	r3, sp, #12
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	4622      	mov	r2, r4
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <_svfiprintf_r+0x1ec>)
 80012e4:	a904      	add	r1, sp, #16
 80012e6:	4640      	mov	r0, r8
 80012e8:	f000 f882 	bl	80013f0 <_printf_i>
 80012ec:	e7ea      	b.n	80012c4 <_svfiprintf_r+0x1b0>
 80012ee:	bf00      	nop
 80012f0:	08001932 	.word	0x08001932
 80012f4:	08001938 	.word	0x08001938
 80012f8:	0800193c 	.word	0x0800193c
 80012fc:	00000000 	.word	0x00000000
 8001300:	08001061 	.word	0x08001061

08001304 <_printf_common>:
 8001304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001308:	4691      	mov	r9, r2
 800130a:	461f      	mov	r7, r3
 800130c:	688a      	ldr	r2, [r1, #8]
 800130e:	690b      	ldr	r3, [r1, #16]
 8001310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001314:	4293      	cmp	r3, r2
 8001316:	bfb8      	it	lt
 8001318:	4613      	movlt	r3, r2
 800131a:	f8c9 3000 	str.w	r3, [r9]
 800131e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001322:	4606      	mov	r6, r0
 8001324:	460c      	mov	r4, r1
 8001326:	b112      	cbz	r2, 800132e <_printf_common+0x2a>
 8001328:	3301      	adds	r3, #1
 800132a:	f8c9 3000 	str.w	r3, [r9]
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	0699      	lsls	r1, r3, #26
 8001332:	bf42      	ittt	mi
 8001334:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001338:	3302      	addmi	r3, #2
 800133a:	f8c9 3000 	strmi.w	r3, [r9]
 800133e:	6825      	ldr	r5, [r4, #0]
 8001340:	f015 0506 	ands.w	r5, r5, #6
 8001344:	d107      	bne.n	8001356 <_printf_common+0x52>
 8001346:	f104 0a19 	add.w	sl, r4, #25
 800134a:	68e3      	ldr	r3, [r4, #12]
 800134c:	f8d9 2000 	ldr.w	r2, [r9]
 8001350:	1a9b      	subs	r3, r3, r2
 8001352:	42ab      	cmp	r3, r5
 8001354:	dc28      	bgt.n	80013a8 <_printf_common+0xa4>
 8001356:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800135a:	6822      	ldr	r2, [r4, #0]
 800135c:	3300      	adds	r3, #0
 800135e:	bf18      	it	ne
 8001360:	2301      	movne	r3, #1
 8001362:	0692      	lsls	r2, r2, #26
 8001364:	d42d      	bmi.n	80013c2 <_printf_common+0xbe>
 8001366:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800136a:	4639      	mov	r1, r7
 800136c:	4630      	mov	r0, r6
 800136e:	47c0      	blx	r8
 8001370:	3001      	adds	r0, #1
 8001372:	d020      	beq.n	80013b6 <_printf_common+0xb2>
 8001374:	6823      	ldr	r3, [r4, #0]
 8001376:	68e5      	ldr	r5, [r4, #12]
 8001378:	f8d9 2000 	ldr.w	r2, [r9]
 800137c:	f003 0306 	and.w	r3, r3, #6
 8001380:	2b04      	cmp	r3, #4
 8001382:	bf08      	it	eq
 8001384:	1aad      	subeq	r5, r5, r2
 8001386:	68a3      	ldr	r3, [r4, #8]
 8001388:	6922      	ldr	r2, [r4, #16]
 800138a:	bf0c      	ite	eq
 800138c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001390:	2500      	movne	r5, #0
 8001392:	4293      	cmp	r3, r2
 8001394:	bfc4      	itt	gt
 8001396:	1a9b      	subgt	r3, r3, r2
 8001398:	18ed      	addgt	r5, r5, r3
 800139a:	f04f 0900 	mov.w	r9, #0
 800139e:	341a      	adds	r4, #26
 80013a0:	454d      	cmp	r5, r9
 80013a2:	d11a      	bne.n	80013da <_printf_common+0xd6>
 80013a4:	2000      	movs	r0, #0
 80013a6:	e008      	b.n	80013ba <_printf_common+0xb6>
 80013a8:	2301      	movs	r3, #1
 80013aa:	4652      	mov	r2, sl
 80013ac:	4639      	mov	r1, r7
 80013ae:	4630      	mov	r0, r6
 80013b0:	47c0      	blx	r8
 80013b2:	3001      	adds	r0, #1
 80013b4:	d103      	bne.n	80013be <_printf_common+0xba>
 80013b6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013be:	3501      	adds	r5, #1
 80013c0:	e7c3      	b.n	800134a <_printf_common+0x46>
 80013c2:	18e1      	adds	r1, r4, r3
 80013c4:	1c5a      	adds	r2, r3, #1
 80013c6:	2030      	movs	r0, #48	; 0x30
 80013c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80013cc:	4422      	add	r2, r4
 80013ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80013d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80013d6:	3302      	adds	r3, #2
 80013d8:	e7c5      	b.n	8001366 <_printf_common+0x62>
 80013da:	2301      	movs	r3, #1
 80013dc:	4622      	mov	r2, r4
 80013de:	4639      	mov	r1, r7
 80013e0:	4630      	mov	r0, r6
 80013e2:	47c0      	blx	r8
 80013e4:	3001      	adds	r0, #1
 80013e6:	d0e6      	beq.n	80013b6 <_printf_common+0xb2>
 80013e8:	f109 0901 	add.w	r9, r9, #1
 80013ec:	e7d8      	b.n	80013a0 <_printf_common+0x9c>
	...

080013f0 <_printf_i>:
 80013f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80013f8:	460c      	mov	r4, r1
 80013fa:	7e09      	ldrb	r1, [r1, #24]
 80013fc:	b085      	sub	sp, #20
 80013fe:	296e      	cmp	r1, #110	; 0x6e
 8001400:	4617      	mov	r7, r2
 8001402:	4606      	mov	r6, r0
 8001404:	4698      	mov	r8, r3
 8001406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001408:	f000 80b3 	beq.w	8001572 <_printf_i+0x182>
 800140c:	d822      	bhi.n	8001454 <_printf_i+0x64>
 800140e:	2963      	cmp	r1, #99	; 0x63
 8001410:	d036      	beq.n	8001480 <_printf_i+0x90>
 8001412:	d80a      	bhi.n	800142a <_printf_i+0x3a>
 8001414:	2900      	cmp	r1, #0
 8001416:	f000 80b9 	beq.w	800158c <_printf_i+0x19c>
 800141a:	2958      	cmp	r1, #88	; 0x58
 800141c:	f000 8083 	beq.w	8001526 <_printf_i+0x136>
 8001420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001424:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001428:	e032      	b.n	8001490 <_printf_i+0xa0>
 800142a:	2964      	cmp	r1, #100	; 0x64
 800142c:	d001      	beq.n	8001432 <_printf_i+0x42>
 800142e:	2969      	cmp	r1, #105	; 0x69
 8001430:	d1f6      	bne.n	8001420 <_printf_i+0x30>
 8001432:	6820      	ldr	r0, [r4, #0]
 8001434:	6813      	ldr	r3, [r2, #0]
 8001436:	0605      	lsls	r5, r0, #24
 8001438:	f103 0104 	add.w	r1, r3, #4
 800143c:	d52a      	bpl.n	8001494 <_printf_i+0xa4>
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6011      	str	r1, [r2, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	da03      	bge.n	800144e <_printf_i+0x5e>
 8001446:	222d      	movs	r2, #45	; 0x2d
 8001448:	425b      	negs	r3, r3
 800144a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800144e:	486f      	ldr	r0, [pc, #444]	; (800160c <_printf_i+0x21c>)
 8001450:	220a      	movs	r2, #10
 8001452:	e039      	b.n	80014c8 <_printf_i+0xd8>
 8001454:	2973      	cmp	r1, #115	; 0x73
 8001456:	f000 809d 	beq.w	8001594 <_printf_i+0x1a4>
 800145a:	d808      	bhi.n	800146e <_printf_i+0x7e>
 800145c:	296f      	cmp	r1, #111	; 0x6f
 800145e:	d020      	beq.n	80014a2 <_printf_i+0xb2>
 8001460:	2970      	cmp	r1, #112	; 0x70
 8001462:	d1dd      	bne.n	8001420 <_printf_i+0x30>
 8001464:	6823      	ldr	r3, [r4, #0]
 8001466:	f043 0320 	orr.w	r3, r3, #32
 800146a:	6023      	str	r3, [r4, #0]
 800146c:	e003      	b.n	8001476 <_printf_i+0x86>
 800146e:	2975      	cmp	r1, #117	; 0x75
 8001470:	d017      	beq.n	80014a2 <_printf_i+0xb2>
 8001472:	2978      	cmp	r1, #120	; 0x78
 8001474:	d1d4      	bne.n	8001420 <_printf_i+0x30>
 8001476:	2378      	movs	r3, #120	; 0x78
 8001478:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800147c:	4864      	ldr	r0, [pc, #400]	; (8001610 <_printf_i+0x220>)
 800147e:	e055      	b.n	800152c <_printf_i+0x13c>
 8001480:	6813      	ldr	r3, [r2, #0]
 8001482:	1d19      	adds	r1, r3, #4
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6011      	str	r1, [r2, #0]
 8001488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800148c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001490:	2301      	movs	r3, #1
 8001492:	e08c      	b.n	80015ae <_printf_i+0x1be>
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6011      	str	r1, [r2, #0]
 8001498:	f010 0f40 	tst.w	r0, #64	; 0x40
 800149c:	bf18      	it	ne
 800149e:	b21b      	sxthne	r3, r3
 80014a0:	e7cf      	b.n	8001442 <_printf_i+0x52>
 80014a2:	6813      	ldr	r3, [r2, #0]
 80014a4:	6825      	ldr	r5, [r4, #0]
 80014a6:	1d18      	adds	r0, r3, #4
 80014a8:	6010      	str	r0, [r2, #0]
 80014aa:	0628      	lsls	r0, r5, #24
 80014ac:	d501      	bpl.n	80014b2 <_printf_i+0xc2>
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	e002      	b.n	80014b8 <_printf_i+0xc8>
 80014b2:	0668      	lsls	r0, r5, #25
 80014b4:	d5fb      	bpl.n	80014ae <_printf_i+0xbe>
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	4854      	ldr	r0, [pc, #336]	; (800160c <_printf_i+0x21c>)
 80014ba:	296f      	cmp	r1, #111	; 0x6f
 80014bc:	bf14      	ite	ne
 80014be:	220a      	movne	r2, #10
 80014c0:	2208      	moveq	r2, #8
 80014c2:	2100      	movs	r1, #0
 80014c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80014c8:	6865      	ldr	r5, [r4, #4]
 80014ca:	60a5      	str	r5, [r4, #8]
 80014cc:	2d00      	cmp	r5, #0
 80014ce:	f2c0 8095 	blt.w	80015fc <_printf_i+0x20c>
 80014d2:	6821      	ldr	r1, [r4, #0]
 80014d4:	f021 0104 	bic.w	r1, r1, #4
 80014d8:	6021      	str	r1, [r4, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d13d      	bne.n	800155a <_printf_i+0x16a>
 80014de:	2d00      	cmp	r5, #0
 80014e0:	f040 808e 	bne.w	8001600 <_printf_i+0x210>
 80014e4:	4665      	mov	r5, ip
 80014e6:	2a08      	cmp	r2, #8
 80014e8:	d10b      	bne.n	8001502 <_printf_i+0x112>
 80014ea:	6823      	ldr	r3, [r4, #0]
 80014ec:	07db      	lsls	r3, r3, #31
 80014ee:	d508      	bpl.n	8001502 <_printf_i+0x112>
 80014f0:	6923      	ldr	r3, [r4, #16]
 80014f2:	6862      	ldr	r2, [r4, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	bfde      	ittt	le
 80014f8:	2330      	movle	r3, #48	; 0x30
 80014fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80014fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001502:	ebac 0305 	sub.w	r3, ip, r5
 8001506:	6123      	str	r3, [r4, #16]
 8001508:	f8cd 8000 	str.w	r8, [sp]
 800150c:	463b      	mov	r3, r7
 800150e:	aa03      	add	r2, sp, #12
 8001510:	4621      	mov	r1, r4
 8001512:	4630      	mov	r0, r6
 8001514:	f7ff fef6 	bl	8001304 <_printf_common>
 8001518:	3001      	adds	r0, #1
 800151a:	d14d      	bne.n	80015b8 <_printf_i+0x1c8>
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	b005      	add	sp, #20
 8001522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001526:	4839      	ldr	r0, [pc, #228]	; (800160c <_printf_i+0x21c>)
 8001528:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800152c:	6813      	ldr	r3, [r2, #0]
 800152e:	6821      	ldr	r1, [r4, #0]
 8001530:	1d1d      	adds	r5, r3, #4
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6015      	str	r5, [r2, #0]
 8001536:	060a      	lsls	r2, r1, #24
 8001538:	d50b      	bpl.n	8001552 <_printf_i+0x162>
 800153a:	07ca      	lsls	r2, r1, #31
 800153c:	bf44      	itt	mi
 800153e:	f041 0120 	orrmi.w	r1, r1, #32
 8001542:	6021      	strmi	r1, [r4, #0]
 8001544:	b91b      	cbnz	r3, 800154e <_printf_i+0x15e>
 8001546:	6822      	ldr	r2, [r4, #0]
 8001548:	f022 0220 	bic.w	r2, r2, #32
 800154c:	6022      	str	r2, [r4, #0]
 800154e:	2210      	movs	r2, #16
 8001550:	e7b7      	b.n	80014c2 <_printf_i+0xd2>
 8001552:	064d      	lsls	r5, r1, #25
 8001554:	bf48      	it	mi
 8001556:	b29b      	uxthmi	r3, r3
 8001558:	e7ef      	b.n	800153a <_printf_i+0x14a>
 800155a:	4665      	mov	r5, ip
 800155c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001560:	fb02 3311 	mls	r3, r2, r1, r3
 8001564:	5cc3      	ldrb	r3, [r0, r3]
 8001566:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800156a:	460b      	mov	r3, r1
 800156c:	2900      	cmp	r1, #0
 800156e:	d1f5      	bne.n	800155c <_printf_i+0x16c>
 8001570:	e7b9      	b.n	80014e6 <_printf_i+0xf6>
 8001572:	6813      	ldr	r3, [r2, #0]
 8001574:	6825      	ldr	r5, [r4, #0]
 8001576:	6961      	ldr	r1, [r4, #20]
 8001578:	1d18      	adds	r0, r3, #4
 800157a:	6010      	str	r0, [r2, #0]
 800157c:	0628      	lsls	r0, r5, #24
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	d501      	bpl.n	8001586 <_printf_i+0x196>
 8001582:	6019      	str	r1, [r3, #0]
 8001584:	e002      	b.n	800158c <_printf_i+0x19c>
 8001586:	066a      	lsls	r2, r5, #25
 8001588:	d5fb      	bpl.n	8001582 <_printf_i+0x192>
 800158a:	8019      	strh	r1, [r3, #0]
 800158c:	2300      	movs	r3, #0
 800158e:	6123      	str	r3, [r4, #16]
 8001590:	4665      	mov	r5, ip
 8001592:	e7b9      	b.n	8001508 <_printf_i+0x118>
 8001594:	6813      	ldr	r3, [r2, #0]
 8001596:	1d19      	adds	r1, r3, #4
 8001598:	6011      	str	r1, [r2, #0]
 800159a:	681d      	ldr	r5, [r3, #0]
 800159c:	6862      	ldr	r2, [r4, #4]
 800159e:	2100      	movs	r1, #0
 80015a0:	4628      	mov	r0, r5
 80015a2:	f7fe fe35 	bl	8000210 <memchr>
 80015a6:	b108      	cbz	r0, 80015ac <_printf_i+0x1bc>
 80015a8:	1b40      	subs	r0, r0, r5
 80015aa:	6060      	str	r0, [r4, #4]
 80015ac:	6863      	ldr	r3, [r4, #4]
 80015ae:	6123      	str	r3, [r4, #16]
 80015b0:	2300      	movs	r3, #0
 80015b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80015b6:	e7a7      	b.n	8001508 <_printf_i+0x118>
 80015b8:	6923      	ldr	r3, [r4, #16]
 80015ba:	462a      	mov	r2, r5
 80015bc:	4639      	mov	r1, r7
 80015be:	4630      	mov	r0, r6
 80015c0:	47c0      	blx	r8
 80015c2:	3001      	adds	r0, #1
 80015c4:	d0aa      	beq.n	800151c <_printf_i+0x12c>
 80015c6:	6823      	ldr	r3, [r4, #0]
 80015c8:	079b      	lsls	r3, r3, #30
 80015ca:	d413      	bmi.n	80015f4 <_printf_i+0x204>
 80015cc:	68e0      	ldr	r0, [r4, #12]
 80015ce:	9b03      	ldr	r3, [sp, #12]
 80015d0:	4298      	cmp	r0, r3
 80015d2:	bfb8      	it	lt
 80015d4:	4618      	movlt	r0, r3
 80015d6:	e7a3      	b.n	8001520 <_printf_i+0x130>
 80015d8:	2301      	movs	r3, #1
 80015da:	464a      	mov	r2, r9
 80015dc:	4639      	mov	r1, r7
 80015de:	4630      	mov	r0, r6
 80015e0:	47c0      	blx	r8
 80015e2:	3001      	adds	r0, #1
 80015e4:	d09a      	beq.n	800151c <_printf_i+0x12c>
 80015e6:	3501      	adds	r5, #1
 80015e8:	68e3      	ldr	r3, [r4, #12]
 80015ea:	9a03      	ldr	r2, [sp, #12]
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	42ab      	cmp	r3, r5
 80015f0:	dcf2      	bgt.n	80015d8 <_printf_i+0x1e8>
 80015f2:	e7eb      	b.n	80015cc <_printf_i+0x1dc>
 80015f4:	2500      	movs	r5, #0
 80015f6:	f104 0919 	add.w	r9, r4, #25
 80015fa:	e7f5      	b.n	80015e8 <_printf_i+0x1f8>
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1ac      	bne.n	800155a <_printf_i+0x16a>
 8001600:	7803      	ldrb	r3, [r0, #0]
 8001602:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001606:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800160a:	e76c      	b.n	80014e6 <_printf_i+0xf6>
 800160c:	08001943 	.word	0x08001943
 8001610:	08001954 	.word	0x08001954

08001614 <memcpy>:
 8001614:	b510      	push	{r4, lr}
 8001616:	1e43      	subs	r3, r0, #1
 8001618:	440a      	add	r2, r1
 800161a:	4291      	cmp	r1, r2
 800161c:	d100      	bne.n	8001620 <memcpy+0xc>
 800161e:	bd10      	pop	{r4, pc}
 8001620:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001624:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001628:	e7f7      	b.n	800161a <memcpy+0x6>

0800162a <memmove>:
 800162a:	4288      	cmp	r0, r1
 800162c:	b510      	push	{r4, lr}
 800162e:	eb01 0302 	add.w	r3, r1, r2
 8001632:	d807      	bhi.n	8001644 <memmove+0x1a>
 8001634:	1e42      	subs	r2, r0, #1
 8001636:	4299      	cmp	r1, r3
 8001638:	d00a      	beq.n	8001650 <memmove+0x26>
 800163a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800163e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001642:	e7f8      	b.n	8001636 <memmove+0xc>
 8001644:	4283      	cmp	r3, r0
 8001646:	d9f5      	bls.n	8001634 <memmove+0xa>
 8001648:	1881      	adds	r1, r0, r2
 800164a:	1ad2      	subs	r2, r2, r3
 800164c:	42d3      	cmn	r3, r2
 800164e:	d100      	bne.n	8001652 <memmove+0x28>
 8001650:	bd10      	pop	{r4, pc}
 8001652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001656:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800165a:	e7f7      	b.n	800164c <memmove+0x22>

0800165c <_free_r>:
 800165c:	b538      	push	{r3, r4, r5, lr}
 800165e:	4605      	mov	r5, r0
 8001660:	2900      	cmp	r1, #0
 8001662:	d045      	beq.n	80016f0 <_free_r+0x94>
 8001664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001668:	1f0c      	subs	r4, r1, #4
 800166a:	2b00      	cmp	r3, #0
 800166c:	bfb8      	it	lt
 800166e:	18e4      	addlt	r4, r4, r3
 8001670:	f000 f8d2 	bl	8001818 <__malloc_lock>
 8001674:	4a1f      	ldr	r2, [pc, #124]	; (80016f4 <_free_r+0x98>)
 8001676:	6813      	ldr	r3, [r2, #0]
 8001678:	4610      	mov	r0, r2
 800167a:	b933      	cbnz	r3, 800168a <_free_r+0x2e>
 800167c:	6063      	str	r3, [r4, #4]
 800167e:	6014      	str	r4, [r2, #0]
 8001680:	4628      	mov	r0, r5
 8001682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001686:	f000 b8c8 	b.w	800181a <__malloc_unlock>
 800168a:	42a3      	cmp	r3, r4
 800168c:	d90c      	bls.n	80016a8 <_free_r+0x4c>
 800168e:	6821      	ldr	r1, [r4, #0]
 8001690:	1862      	adds	r2, r4, r1
 8001692:	4293      	cmp	r3, r2
 8001694:	bf04      	itt	eq
 8001696:	681a      	ldreq	r2, [r3, #0]
 8001698:	685b      	ldreq	r3, [r3, #4]
 800169a:	6063      	str	r3, [r4, #4]
 800169c:	bf04      	itt	eq
 800169e:	1852      	addeq	r2, r2, r1
 80016a0:	6022      	streq	r2, [r4, #0]
 80016a2:	6004      	str	r4, [r0, #0]
 80016a4:	e7ec      	b.n	8001680 <_free_r+0x24>
 80016a6:	4613      	mov	r3, r2
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	b10a      	cbz	r2, 80016b0 <_free_r+0x54>
 80016ac:	42a2      	cmp	r2, r4
 80016ae:	d9fa      	bls.n	80016a6 <_free_r+0x4a>
 80016b0:	6819      	ldr	r1, [r3, #0]
 80016b2:	1858      	adds	r0, r3, r1
 80016b4:	42a0      	cmp	r0, r4
 80016b6:	d10b      	bne.n	80016d0 <_free_r+0x74>
 80016b8:	6820      	ldr	r0, [r4, #0]
 80016ba:	4401      	add	r1, r0
 80016bc:	1858      	adds	r0, r3, r1
 80016be:	4282      	cmp	r2, r0
 80016c0:	6019      	str	r1, [r3, #0]
 80016c2:	d1dd      	bne.n	8001680 <_free_r+0x24>
 80016c4:	6810      	ldr	r0, [r2, #0]
 80016c6:	6852      	ldr	r2, [r2, #4]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	4401      	add	r1, r0
 80016cc:	6019      	str	r1, [r3, #0]
 80016ce:	e7d7      	b.n	8001680 <_free_r+0x24>
 80016d0:	d902      	bls.n	80016d8 <_free_r+0x7c>
 80016d2:	230c      	movs	r3, #12
 80016d4:	602b      	str	r3, [r5, #0]
 80016d6:	e7d3      	b.n	8001680 <_free_r+0x24>
 80016d8:	6820      	ldr	r0, [r4, #0]
 80016da:	1821      	adds	r1, r4, r0
 80016dc:	428a      	cmp	r2, r1
 80016de:	bf04      	itt	eq
 80016e0:	6811      	ldreq	r1, [r2, #0]
 80016e2:	6852      	ldreq	r2, [r2, #4]
 80016e4:	6062      	str	r2, [r4, #4]
 80016e6:	bf04      	itt	eq
 80016e8:	1809      	addeq	r1, r1, r0
 80016ea:	6021      	streq	r1, [r4, #0]
 80016ec:	605c      	str	r4, [r3, #4]
 80016ee:	e7c7      	b.n	8001680 <_free_r+0x24>
 80016f0:	bd38      	pop	{r3, r4, r5, pc}
 80016f2:	bf00      	nop
 80016f4:	2000029c 	.word	0x2000029c

080016f8 <_malloc_r>:
 80016f8:	b570      	push	{r4, r5, r6, lr}
 80016fa:	1ccd      	adds	r5, r1, #3
 80016fc:	f025 0503 	bic.w	r5, r5, #3
 8001700:	3508      	adds	r5, #8
 8001702:	2d0c      	cmp	r5, #12
 8001704:	bf38      	it	cc
 8001706:	250c      	movcc	r5, #12
 8001708:	2d00      	cmp	r5, #0
 800170a:	4606      	mov	r6, r0
 800170c:	db01      	blt.n	8001712 <_malloc_r+0x1a>
 800170e:	42a9      	cmp	r1, r5
 8001710:	d903      	bls.n	800171a <_malloc_r+0x22>
 8001712:	230c      	movs	r3, #12
 8001714:	6033      	str	r3, [r6, #0]
 8001716:	2000      	movs	r0, #0
 8001718:	bd70      	pop	{r4, r5, r6, pc}
 800171a:	f000 f87d 	bl	8001818 <__malloc_lock>
 800171e:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <_malloc_r+0xac>)
 8001720:	6814      	ldr	r4, [r2, #0]
 8001722:	4621      	mov	r1, r4
 8001724:	b991      	cbnz	r1, 800174c <_malloc_r+0x54>
 8001726:	4c20      	ldr	r4, [pc, #128]	; (80017a8 <_malloc_r+0xb0>)
 8001728:	6823      	ldr	r3, [r4, #0]
 800172a:	b91b      	cbnz	r3, 8001734 <_malloc_r+0x3c>
 800172c:	4630      	mov	r0, r6
 800172e:	f000 f863 	bl	80017f8 <_sbrk_r>
 8001732:	6020      	str	r0, [r4, #0]
 8001734:	4629      	mov	r1, r5
 8001736:	4630      	mov	r0, r6
 8001738:	f000 f85e 	bl	80017f8 <_sbrk_r>
 800173c:	1c43      	adds	r3, r0, #1
 800173e:	d124      	bne.n	800178a <_malloc_r+0x92>
 8001740:	230c      	movs	r3, #12
 8001742:	6033      	str	r3, [r6, #0]
 8001744:	4630      	mov	r0, r6
 8001746:	f000 f868 	bl	800181a <__malloc_unlock>
 800174a:	e7e4      	b.n	8001716 <_malloc_r+0x1e>
 800174c:	680b      	ldr	r3, [r1, #0]
 800174e:	1b5b      	subs	r3, r3, r5
 8001750:	d418      	bmi.n	8001784 <_malloc_r+0x8c>
 8001752:	2b0b      	cmp	r3, #11
 8001754:	d90f      	bls.n	8001776 <_malloc_r+0x7e>
 8001756:	600b      	str	r3, [r1, #0]
 8001758:	50cd      	str	r5, [r1, r3]
 800175a:	18cc      	adds	r4, r1, r3
 800175c:	4630      	mov	r0, r6
 800175e:	f000 f85c 	bl	800181a <__malloc_unlock>
 8001762:	f104 000b 	add.w	r0, r4, #11
 8001766:	1d23      	adds	r3, r4, #4
 8001768:	f020 0007 	bic.w	r0, r0, #7
 800176c:	1ac3      	subs	r3, r0, r3
 800176e:	d0d3      	beq.n	8001718 <_malloc_r+0x20>
 8001770:	425a      	negs	r2, r3
 8001772:	50e2      	str	r2, [r4, r3]
 8001774:	e7d0      	b.n	8001718 <_malloc_r+0x20>
 8001776:	428c      	cmp	r4, r1
 8001778:	684b      	ldr	r3, [r1, #4]
 800177a:	bf16      	itet	ne
 800177c:	6063      	strne	r3, [r4, #4]
 800177e:	6013      	streq	r3, [r2, #0]
 8001780:	460c      	movne	r4, r1
 8001782:	e7eb      	b.n	800175c <_malloc_r+0x64>
 8001784:	460c      	mov	r4, r1
 8001786:	6849      	ldr	r1, [r1, #4]
 8001788:	e7cc      	b.n	8001724 <_malloc_r+0x2c>
 800178a:	1cc4      	adds	r4, r0, #3
 800178c:	f024 0403 	bic.w	r4, r4, #3
 8001790:	42a0      	cmp	r0, r4
 8001792:	d005      	beq.n	80017a0 <_malloc_r+0xa8>
 8001794:	1a21      	subs	r1, r4, r0
 8001796:	4630      	mov	r0, r6
 8001798:	f000 f82e 	bl	80017f8 <_sbrk_r>
 800179c:	3001      	adds	r0, #1
 800179e:	d0cf      	beq.n	8001740 <_malloc_r+0x48>
 80017a0:	6025      	str	r5, [r4, #0]
 80017a2:	e7db      	b.n	800175c <_malloc_r+0x64>
 80017a4:	2000029c 	.word	0x2000029c
 80017a8:	200002a0 	.word	0x200002a0

080017ac <_realloc_r>:
 80017ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ae:	4607      	mov	r7, r0
 80017b0:	4614      	mov	r4, r2
 80017b2:	460e      	mov	r6, r1
 80017b4:	b921      	cbnz	r1, 80017c0 <_realloc_r+0x14>
 80017b6:	4611      	mov	r1, r2
 80017b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80017bc:	f7ff bf9c 	b.w	80016f8 <_malloc_r>
 80017c0:	b922      	cbnz	r2, 80017cc <_realloc_r+0x20>
 80017c2:	f7ff ff4b 	bl	800165c <_free_r>
 80017c6:	4625      	mov	r5, r4
 80017c8:	4628      	mov	r0, r5
 80017ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017cc:	f000 f826 	bl	800181c <_malloc_usable_size_r>
 80017d0:	42a0      	cmp	r0, r4
 80017d2:	d20f      	bcs.n	80017f4 <_realloc_r+0x48>
 80017d4:	4621      	mov	r1, r4
 80017d6:	4638      	mov	r0, r7
 80017d8:	f7ff ff8e 	bl	80016f8 <_malloc_r>
 80017dc:	4605      	mov	r5, r0
 80017de:	2800      	cmp	r0, #0
 80017e0:	d0f2      	beq.n	80017c8 <_realloc_r+0x1c>
 80017e2:	4631      	mov	r1, r6
 80017e4:	4622      	mov	r2, r4
 80017e6:	f7ff ff15 	bl	8001614 <memcpy>
 80017ea:	4631      	mov	r1, r6
 80017ec:	4638      	mov	r0, r7
 80017ee:	f7ff ff35 	bl	800165c <_free_r>
 80017f2:	e7e9      	b.n	80017c8 <_realloc_r+0x1c>
 80017f4:	4635      	mov	r5, r6
 80017f6:	e7e7      	b.n	80017c8 <_realloc_r+0x1c>

080017f8 <_sbrk_r>:
 80017f8:	b538      	push	{r3, r4, r5, lr}
 80017fa:	4c06      	ldr	r4, [pc, #24]	; (8001814 <_sbrk_r+0x1c>)
 80017fc:	2300      	movs	r3, #0
 80017fe:	4605      	mov	r5, r0
 8001800:	4608      	mov	r0, r1
 8001802:	6023      	str	r3, [r4, #0]
 8001804:	f7fe fe88 	bl	8000518 <_sbrk>
 8001808:	1c43      	adds	r3, r0, #1
 800180a:	d102      	bne.n	8001812 <_sbrk_r+0x1a>
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	b103      	cbz	r3, 8001812 <_sbrk_r+0x1a>
 8001810:	602b      	str	r3, [r5, #0]
 8001812:	bd38      	pop	{r3, r4, r5, pc}
 8001814:	200002d8 	.word	0x200002d8

08001818 <__malloc_lock>:
 8001818:	4770      	bx	lr

0800181a <__malloc_unlock>:
 800181a:	4770      	bx	lr

0800181c <_malloc_usable_size_r>:
 800181c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001820:	1f18      	subs	r0, r3, #4
 8001822:	2b00      	cmp	r3, #0
 8001824:	bfbc      	itt	lt
 8001826:	580b      	ldrlt	r3, [r1, r0]
 8001828:	18c0      	addlt	r0, r0, r3
 800182a:	4770      	bx	lr

0800182c <_init>:
 800182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182e:	bf00      	nop
 8001830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001832:	bc08      	pop	{r3}
 8001834:	469e      	mov	lr, r3
 8001836:	4770      	bx	lr

08001838 <_fini>:
 8001838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183a:	bf00      	nop
 800183c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800183e:	bc08      	pop	{r3}
 8001840:	469e      	mov	lr, r3
 8001842:	4770      	bx	lr
